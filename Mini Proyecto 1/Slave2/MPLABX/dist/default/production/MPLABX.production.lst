

Microchip MPLAB XC8 Assembler V2.31 build 20201012212115 
                                                                                               Tue Feb 23 15:59:36 2021

Microchip MPLAB XC8 C Compiler v2.31 (Free license) build 20201012212115 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	maintext,global,class=CODE,split=1,delta=2
     8                           	psect	text1,local,class=CODE,merge=1,delta=2
     9                           	psect	text2,local,class=CODE,merge=1,delta=2
    10                           	psect	text3,local,class=CODE,merge=1,delta=2
    11                           	psect	intentry,global,class=CODE,delta=2
    12                           	psect	text4,local,class=CODE,merge=1,delta=2
    13                           	psect	text5,local,class=CODE,merge=1,delta=2
    14                           	psect	text6,local,class=CODE,merge=1,delta=2
    15                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    16                           	dabs	1,0x7E,2
    17  0000                     
    18                           ; Version 2.20
    19                           ; Generated 12/02/2020 GMT
    20                           ; 
    21                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    22                           ; All rights reserved.
    23                           ; 
    24                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    25                           ; 
    26                           ; Redistribution and use in source and binary forms, with or without modification, are
    27                           ; permitted provided that the following conditions are met:
    28                           ; 
    29                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    30                           ;        conditions and the following disclaimer.
    31                           ; 
    32                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    33                           ;        of conditions and the following disclaimer in the documentation and/or other
    34                           ;        materials provided with the distribution.
    35                           ; 
    36                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    37                           ;        software without specific prior written permission.
    38                           ; 
    39                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    40                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    41                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    42                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    43                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    44                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    45                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    46                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    47                           ; 
    48                           ; 
    49                           ; Code-generator required, PIC16F887 Definitions
    50                           ; 
    51                           ; SFR Addresses
    52  0000                     	;# 
    53  0001                     	;# 
    54  0002                     	;# 
    55  0003                     	;# 
    56  0004                     	;# 
    57  0005                     	;# 
    58  0006                     	;# 
    59  0007                     	;# 
    60  0008                     	;# 
    61  0009                     	;# 
    62  000A                     	;# 
    63  000B                     	;# 
    64  000C                     	;# 
    65  000D                     	;# 
    66  000E                     	;# 
    67  000E                     	;# 
    68  000F                     	;# 
    69  0010                     	;# 
    70  0011                     	;# 
    71  0012                     	;# 
    72  0013                     	;# 
    73  0014                     	;# 
    74  0015                     	;# 
    75  0015                     	;# 
    76  0016                     	;# 
    77  0017                     	;# 
    78  0018                     	;# 
    79  0019                     	;# 
    80  001A                     	;# 
    81  001B                     	;# 
    82  001B                     	;# 
    83  001C                     	;# 
    84  001D                     	;# 
    85  001E                     	;# 
    86  001F                     	;# 
    87  0081                     	;# 
    88  0085                     	;# 
    89  0086                     	;# 
    90  0087                     	;# 
    91  0088                     	;# 
    92  0089                     	;# 
    93  008C                     	;# 
    94  008D                     	;# 
    95  008E                     	;# 
    96  008F                     	;# 
    97  0090                     	;# 
    98  0091                     	;# 
    99  0092                     	;# 
   100  0093                     	;# 
   101  0093                     	;# 
   102  0093                     	;# 
   103  0094                     	;# 
   104  0095                     	;# 
   105  0096                     	;# 
   106  0097                     	;# 
   107  0098                     	;# 
   108  0099                     	;# 
   109  009A                     	;# 
   110  009B                     	;# 
   111  009C                     	;# 
   112  009D                     	;# 
   113  009E                     	;# 
   114  009F                     	;# 
   115  0105                     	;# 
   116  0107                     	;# 
   117  0108                     	;# 
   118  0109                     	;# 
   119  010C                     	;# 
   120  010C                     	;# 
   121  010D                     	;# 
   122  010E                     	;# 
   123  010F                     	;# 
   124  0185                     	;# 
   125  0187                     	;# 
   126  0188                     	;# 
   127  0189                     	;# 
   128  018C                     	;# 
   129  018D                     	;# 
   130  0000                     	;# 
   131  0001                     	;# 
   132  0002                     	;# 
   133  0003                     	;# 
   134  0004                     	;# 
   135  0005                     	;# 
   136  0006                     	;# 
   137  0007                     	;# 
   138  0008                     	;# 
   139  0009                     	;# 
   140  000A                     	;# 
   141  000B                     	;# 
   142  000C                     	;# 
   143  000D                     	;# 
   144  000E                     	;# 
   145  000E                     	;# 
   146  000F                     	;# 
   147  0010                     	;# 
   148  0011                     	;# 
   149  0012                     	;# 
   150  0013                     	;# 
   151  0014                     	;# 
   152  0015                     	;# 
   153  0015                     	;# 
   154  0016                     	;# 
   155  0017                     	;# 
   156  0018                     	;# 
   157  0019                     	;# 
   158  001A                     	;# 
   159  001B                     	;# 
   160  001B                     	;# 
   161  001C                     	;# 
   162  001D                     	;# 
   163  001E                     	;# 
   164  001F                     	;# 
   165  0081                     	;# 
   166  0085                     	;# 
   167  0086                     	;# 
   168  0087                     	;# 
   169  0088                     	;# 
   170  0089                     	;# 
   171  008C                     	;# 
   172  008D                     	;# 
   173  008E                     	;# 
   174  008F                     	;# 
   175  0090                     	;# 
   176  0091                     	;# 
   177  0092                     	;# 
   178  0093                     	;# 
   179  0093                     	;# 
   180  0093                     	;# 
   181  0094                     	;# 
   182  0095                     	;# 
   183  0096                     	;# 
   184  0097                     	;# 
   185  0098                     	;# 
   186  0099                     	;# 
   187  009A                     	;# 
   188  009B                     	;# 
   189  009C                     	;# 
   190  009D                     	;# 
   191  009E                     	;# 
   192  009F                     	;# 
   193  0105                     	;# 
   194  0107                     	;# 
   195  0108                     	;# 
   196  0109                     	;# 
   197  010C                     	;# 
   198  010C                     	;# 
   199  010D                     	;# 
   200  010E                     	;# 
   201  010F                     	;# 
   202  0185                     	;# 
   203  0187                     	;# 
   204  0188                     	;# 
   205  0189                     	;# 
   206  018C                     	;# 
   207  018D                     	;# 
   208  0006                     _PORTBbits	set	6
   209  000B                     _INTCONbits	set	11
   210  000B                     _INTCON	set	11
   211  0007                     _PORTC	set	7
   212  0005                     _PORTA	set	5
   213  0008                     _PORTD	set	8
   214  0013                     _SSPBUF	set	19
   215  0014                     _SSPCON	set	20
   216  0063                     _SSPIF	set	99
   217  0096                     _IOCB	set	150
   218  008C                     _PIE1	set	140
   219  0088                     _TRISD	set	136
   220  0087                     _TRISC	set	135
   221  0086                     _TRISB	set	134
   222  0085                     _TRISA	set	133
   223  0094                     _SSPSTATbits	set	148
   224  0094                     _SSPSTAT	set	148
   225  043B                     _TRISC3	set	1083
   226  043D                     _TRISC5	set	1085
   227  0189                     _ANSELH	set	393
   228  0188                     _ANSEL	set	392
   229                           
   230                           	psect	cinit
   231  000F                     start_initialization:	
   232                           ; #config settings
   233                           
   234  000F                     __initialization:
   235                           
   236                           ; Clear objects allocated to COMMON
   237  000F  01F8               	clrf	__pbssCOMMON& (0+127)
   238  0010  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
   239  0011                     end_of_initialization:	
   240                           ;End of C runtime variable initialization code
   241                           
   242  0011                     __end_of__initialization:
   243  0011  0183               	clrf	3
   244  0012  120A  118A  2864   	ljmp	_main	;jump to C main() function
   245                           
   246                           	psect	bssCOMMON
   247  0078                     __pbssCOMMON:
   248  0078                     _tempi:
   249  0078                     	ds	1
   250  0079                     _putu:
   251  0079                     	ds	1
   252                           
   253                           	psect	cstackCOMMON
   254  0070                     __pcstackCOMMON:
   255  0070                     ?_setup:
   256  0070                     ?_spiReceiveWait:	
   257                           ; 1 bytes @ 0x0
   258                           
   259  0070                     ??_spiReceiveWait:	
   260                           ; 1 bytes @ 0x0
   261                           
   262  0070                     ?_spiWrite:	
   263                           ; 1 bytes @ 0x0
   264                           
   265  0070                     ??_spiWrite:	
   266                           ; 1 bytes @ 0x0
   267                           
   268  0070                     ?_spiRead:	
   269                           ; 1 bytes @ 0x0
   270                           
   271  0070                     ??_spiRead:	
   272                           ; 1 bytes @ 0x0
   273                           
   274  0070                     ?_main:	
   275                           ; 1 bytes @ 0x0
   276                           
   277  0070                     ?_ISR:	
   278                           ; 1 bytes @ 0x0
   279                           
   280  0070                     spiWrite@dat:	
   281                           ; 1 bytes @ 0x0
   282                           
   283                           
   284                           ; 1 bytes @ 0x0
   285  0070                     	ds	1
   286  0071                     ??_ISR:
   287                           
   288                           ; 1 bytes @ 0x1
   289  0071                     	ds	3
   290  0074                     ??_setup:
   291  0074                     ?_spiInit:	
   292                           ; 1 bytes @ 0x4
   293                           
   294  0074                     spiInit@sDataSample:	
   295                           ; 1 bytes @ 0x4
   296                           
   297                           
   298                           ; 1 bytes @ 0x4
   299  0074                     	ds	1
   300  0075                     spiInit@sClockIdle:
   301                           
   302                           ; 1 bytes @ 0x5
   303  0075                     	ds	1
   304  0076                     spiInit@sTransmitEdge:
   305                           
   306                           ; 1 bytes @ 0x6
   307  0076                     	ds	1
   308  0077                     ??_spiInit:
   309  0077                     spiInit@sType:	
   310                           ; 1 bytes @ 0x7
   311                           
   312                           
   313                           ; 1 bytes @ 0x7
   314  0077                     	ds	1
   315  0078                     ??_main:
   316                           
   317                           	psect	maintext
   318  0064                     __pmaintext:	
   319                           ; 1 bytes @ 0x8
   320 ;;
   321 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   322 ;;
   323 ;; *************** function _main *****************
   324 ;; Defined at:
   325 ;;		line 37 in file "Slave2.c"
   326 ;; Parameters:    Size  Location     Type
   327 ;;		None
   328 ;; Auto vars:     Size  Location     Type
   329 ;;		None
   330 ;; Return value:  Size  Location     Type
   331 ;;                  1    wreg      void 
   332 ;; Registers used:
   333 ;;		wreg, status,2, status,0, pclath, cstack
   334 ;; Tracked objects:
   335 ;;		On entry : B00/0
   336 ;;		On exit  : 0/0
   337 ;;		Unchanged: 0/0
   338 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   339 ;;      Params:         0       0       0       0       0
   340 ;;      Locals:         0       0       0       0       0
   341 ;;      Temps:          0       0       0       0       0
   342 ;;      Totals:         0       0       0       0       0
   343 ;;Total ram usage:        0 bytes
   344 ;; Hardware stack levels required when called:    4
   345 ;; This function calls:
   346 ;;		_setup
   347 ;;		_spiInit
   348 ;; This function is called by:
   349 ;;		Startup code after reset
   350 ;; This function uses a non-reentrant model
   351 ;;
   352                           
   353                           
   354                           ;psect for function _main
   355  0064                     _main:
   356  0064                     l764:	
   357                           ;incstack = 0
   358                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   359                           
   360                           
   361                           ;Slave2.c: 38:     setup();
   362  0064  120A  118A  2049  120A  118A  	fcall	_setup
   363                           
   364                           ;Slave2.c: 39:     spiInit(SPI_SLAVE_SS_EN, SPI_DATA_SAMPLE_MIDDLE, SPI_CLOCK_IDLE_LOW, 
      +                          SPI_IDLE_2_ACTIVE);
   365  0069  01F4               	clrf	spiInit@sDataSample
   366  006A  01F5               	clrf	spiInit@sClockIdle
   367  006B  01F6               	clrf	spiInit@sTransmitEdge
   368  006C  3024               	movlw	36
   369  006D  120A  118A  207A  120A  118A  	fcall	_spiInit
   370  0072                     l766:
   371                           
   372                           ;Slave2.c: 41:         PORTD=tempi;
   373  0072  0878               	movf	_tempi,w
   374  0073  1283               	bcf	3,5	;RP0=0, select bank0
   375  0074  1303               	bcf	3,6	;RP1=0, select bank0
   376  0075  0088               	movwf	8	;volatile
   377  0076  2872               	goto	l766
   378  0077  120A  118A  280C   	ljmp	start
   379  007A                     __end_of_main:
   380                           
   381                           	psect	text1
   382  007A                     __ptext1:	
   383 ;; *************** function _spiInit *****************
   384 ;; Defined at:
   385 ;;		line 49 in file "./spi.h"
   386 ;; Parameters:    Size  Location     Type
   387 ;;  sType           1    wreg     enum E1349
   388 ;;  sDataSample     1    4[COMMON] enum E1357
   389 ;;  sClockIdle      1    5[COMMON] enum E1361
   390 ;;  sTransmitEdg    1    6[COMMON] enum E1365
   391 ;; Auto vars:     Size  Location     Type
   392 ;;  sType           1    7[COMMON] enum E1349
   393 ;; Return value:  Size  Location     Type
   394 ;;                  1    wreg      void 
   395 ;; Registers used:
   396 ;;		wreg, status,2, status,0
   397 ;; Tracked objects:
   398 ;;		On entry : 0/0
   399 ;;		On exit  : 0/0
   400 ;;		Unchanged: 0/0
   401 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   402 ;;      Params:         3       0       0       0       0
   403 ;;      Locals:         1       0       0       0       0
   404 ;;      Temps:          0       0       0       0       0
   405 ;;      Totals:         4       0       0       0       0
   406 ;;Total ram usage:        4 bytes
   407 ;; Hardware stack levels used:    1
   408 ;; Hardware stack levels required when called:    3
   409 ;; This function calls:
   410 ;;		Nothing
   411 ;; This function is called by:
   412 ;;		_main
   413 ;; This function uses a non-reentrant model
   414 ;;
   415                           
   416                           
   417                           ;psect for function _spiInit
   418  007A                     _spiInit:
   419                           
   420                           ;incstack = 0
   421                           ; Regs used in _spiInit: [wreg+status,2+status,0]
   422                           ;spiInit@sType stored from wreg
   423  007A  00F7               	movwf	spiInit@sType
   424  007B                     l754:
   425                           
   426                           ;./spi.h: 49: void spiInit(Spi_Type sType, Spi_Data_Sample sDataSample, Spi_Clock_Idle s
      +                          ClockIdle, Spi_Transmit_Edge sTransmitEdge);./spi.h: 50: {;./spi.h: 51:     TRISC5 = 0;
   427  007B  1683               	bsf	3,5	;RP0=1, select bank1
   428  007C  1303               	bcf	3,6	;RP1=0, select bank1
   429  007D  1287               	bcf	7,5	;volatile
   430                           
   431                           ;./spi.h: 52:     if(sType & 0b00000100)
   432  007E  1D77               	btfss	spiInit@sType,2
   433  007F  2881               	goto	u71
   434  0080  2882               	goto	u70
   435  0081                     u71:
   436  0081  2886               	goto	l760
   437  0082                     u70:
   438  0082                     l756:
   439                           
   440                           ;./spi.h: 53:     {;./spi.h: 54:         SSPSTAT = sTransmitEdge;
   441  0082  0876               	movf	spiInit@sTransmitEdge,w
   442  0083  0094               	movwf	20	;volatile
   443  0084                     l758:
   444                           
   445                           ;./spi.h: 55:         TRISC3 = 1;
   446  0084  1587               	bsf	7,3	;volatile
   447                           
   448                           ;./spi.h: 56:     }
   449  0085  288A               	goto	l48
   450  0086                     l760:
   451                           
   452                           ;./spi.h: 58:     {;./spi.h: 59:         SSPSTAT = sDataSample | sTransmitEdge;
   453  0086  0874               	movf	spiInit@sDataSample,w
   454  0087  0476               	iorwf	spiInit@sTransmitEdge,w
   455  0088  0094               	movwf	20	;volatile
   456  0089                     l762:
   457                           
   458                           ;./spi.h: 60:         TRISC3 = 0;
   459  0089  1187               	bcf	7,3	;volatile
   460  008A                     l48:	
   461                           ;./spi.h: 61:     }
   462                           
   463                           
   464                           ;./spi.h: 63:     SSPCON = sType | sClockIdle;
   465  008A  0877               	movf	spiInit@sType,w
   466  008B  0475               	iorwf	spiInit@sClockIdle,w
   467  008C  1283               	bcf	3,5	;RP0=0, select bank0
   468  008D  1303               	bcf	3,6	;RP1=0, select bank0
   469  008E  0094               	movwf	20	;volatile
   470  008F                     l49:
   471  008F  0008               	return
   472  0090                     __end_of_spiInit:
   473                           
   474                           	psect	text2
   475  0049                     __ptext2:	
   476 ;; *************** function _setup *****************
   477 ;; Defined at:
   478 ;;		line 46 in file "Slave2.c"
   479 ;; Parameters:    Size  Location     Type
   480 ;;		None
   481 ;; Auto vars:     Size  Location     Type
   482 ;;		None
   483 ;; Return value:  Size  Location     Type
   484 ;;                  1    wreg      void 
   485 ;; Registers used:
   486 ;;		wreg, status,2
   487 ;; Tracked objects:
   488 ;;		On entry : 0/0
   489 ;;		On exit  : 0/0
   490 ;;		Unchanged: 0/0
   491 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   492 ;;      Params:         0       0       0       0       0
   493 ;;      Locals:         0       0       0       0       0
   494 ;;      Temps:          0       0       0       0       0
   495 ;;      Totals:         0       0       0       0       0
   496 ;;Total ram usage:        0 bytes
   497 ;; Hardware stack levels used:    1
   498 ;; Hardware stack levels required when called:    3
   499 ;; This function calls:
   500 ;;		Nothing
   501 ;; This function is called by:
   502 ;;		_main
   503 ;; This function uses a non-reentrant model
   504 ;;
   505                           
   506                           
   507                           ;psect for function _setup
   508  0049                     _setup:
   509  0049                     l702:	
   510                           ;incstack = 0
   511                           ; Regs used in _setup: [wreg+status,2]
   512                           
   513                           
   514                           ;Slave2.c: 47:     TRISA = 0b00100000;
   515  0049  3020               	movlw	32
   516  004A  1683               	bsf	3,5	;RP0=1, select bank1
   517  004B  1303               	bcf	3,6	;RP1=0, select bank1
   518  004C  0085               	movwf	5	;volatile
   519                           
   520                           ;Slave2.c: 48:     TRISB = 0b00000011;
   521  004D  3003               	movlw	3
   522  004E  0086               	movwf	6	;volatile
   523  004F                     l704:
   524                           
   525                           ;Slave2.c: 49:     TRISC = 0b00000000;
   526  004F  0187               	clrf	7	;volatile
   527  0050                     l706:
   528                           
   529                           ;Slave2.c: 50:     TRISD = 0b00000000;
   530  0050  0188               	clrf	8	;volatile
   531  0051                     l708:
   532                           
   533                           ;Slave2.c: 51:     ANSEL = 0b00000000;
   534  0051  1683               	bsf	3,5	;RP0=1, select bank3
   535  0052  1703               	bsf	3,6	;RP1=1, select bank3
   536  0053  0188               	clrf	8	;volatile
   537  0054                     l710:
   538                           
   539                           ;Slave2.c: 52:     ANSELH = 0b00000000;
   540  0054  0189               	clrf	9	;volatile
   541  0055                     l712:
   542                           
   543                           ;Slave2.c: 53:     PORTA = 0b00000000;
   544  0055  1283               	bcf	3,5	;RP0=0, select bank0
   545  0056  1303               	bcf	3,6	;RP1=0, select bank0
   546  0057  0185               	clrf	5	;volatile
   547  0058                     l714:
   548                           
   549                           ;Slave2.c: 54:     PORTC = 0b00000000;
   550  0058  0187               	clrf	7	;volatile
   551  0059                     l716:
   552                           
   553                           ;Slave2.c: 55:     PORTD = 0b00000000;
   554  0059  0188               	clrf	8	;volatile
   555  005A                     l718:
   556                           
   557                           ;Slave2.c: 56:     INTCON = 0b11001000;
   558  005A  30C8               	movlw	200
   559  005B  008B               	movwf	11	;volatile
   560  005C                     l720:
   561                           
   562                           ;Slave2.c: 57:     PIE1 = 0b00001000;
   563  005C  3008               	movlw	8
   564  005D  1683               	bsf	3,5	;RP0=1, select bank1
   565  005E  1303               	bcf	3,6	;RP1=0, select bank1
   566  005F  008C               	movwf	12	;volatile
   567  0060                     l722:
   568                           
   569                           ;Slave2.c: 58:     IOCB = 0b00000011;
   570  0060  3003               	movlw	3
   571  0061  0096               	movwf	22	;volatile
   572                           
   573                           ;Slave2.c: 59:     tempi = 0;
   574  0062  01F8               	clrf	_tempi
   575  0063                     l81:
   576  0063  0008               	return
   577  0064                     __end_of_setup:
   578                           
   579                           	psect	text3
   580  0015                     __ptext3:	
   581 ;; *************** function _ISR *****************
   582 ;; Defined at:
   583 ;;		line 62 in file "Slave2.c"
   584 ;; Parameters:    Size  Location     Type
   585 ;;		None
   586 ;; Auto vars:     Size  Location     Type
   587 ;;		None
   588 ;; Return value:  Size  Location     Type
   589 ;;                  1    wreg      void 
   590 ;; Registers used:
   591 ;;		wreg, status,2, status,0, pclath, cstack
   592 ;; Tracked objects:
   593 ;;		On entry : 0/0
   594 ;;		On exit  : 0/0
   595 ;;		Unchanged: 0/0
   596 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   597 ;;      Params:         0       0       0       0       0
   598 ;;      Locals:         0       0       0       0       0
   599 ;;      Temps:          3       0       0       0       0
   600 ;;      Totals:         3       0       0       0       0
   601 ;;Total ram usage:        3 bytes
   602 ;; Hardware stack levels used:    1
   603 ;; Hardware stack levels required when called:    2
   604 ;; This function calls:
   605 ;;		_spiRead
   606 ;;		_spiWrite
   607 ;; This function is called by:
   608 ;;		Interrupt level 1
   609 ;; This function uses a non-reentrant model
   610 ;;
   611                           
   612                           
   613                           ;psect for function _ISR
   614  0015                     _ISR:
   615  0015                     i1l734:
   616                           
   617                           ;Slave2.c: 63:     if(INTCONbits.RBIF==1){
   618  0015  1C0B               	btfss	11,0	;volatile
   619  0016  2818               	goto	u3_21
   620  0017  2819               	goto	u3_20
   621  0018                     u3_21:
   622  0018  282B               	goto	i1l748
   623  0019                     u3_20:
   624  0019                     i1l736:
   625                           
   626                           ;Slave2.c: 64:         if(PORTBbits.RB0==1){
   627  0019  1283               	bcf	3,5	;RP0=0, select bank0
   628  001A  1303               	bcf	3,6	;RP1=0, select bank0
   629  001B  1C06               	btfss	6,0	;volatile
   630  001C  281E               	goto	u4_21
   631  001D  281F               	goto	u4_20
   632  001E                     u4_21:
   633  001E  2824               	goto	i1l742
   634  001F                     u4_20:
   635  001F                     i1l738:
   636                           
   637                           ;Slave2.c: 65:             tempi++;
   638  001F  3001               	movlw	1
   639  0020  00F1               	movwf	??_ISR
   640  0021  0871               	movf	??_ISR,w
   641  0022  07F8               	addwf	_tempi,f
   642  0023                     i1l740:
   643                           
   644                           ;Slave2.c: 66:             INTCONbits.RBIF=0;
   645  0023  100B               	bcf	11,0	;volatile
   646  0024                     i1l742:
   647                           
   648                           ;Slave2.c: 68:         if(PORTBbits.RB1==1){
   649  0024  1C86               	btfss	6,1	;volatile
   650  0025  2827               	goto	u5_21
   651  0026  2828               	goto	u5_20
   652  0027                     u5_21:
   653  0027  282B               	goto	i1l748
   654  0028                     u5_20:
   655  0028                     i1l744:
   656                           
   657                           ;Slave2.c: 69:             tempi--;
   658  0028  3001               	movlw	1
   659  0029  02F8               	subwf	_tempi,f
   660  002A                     i1l746:
   661                           
   662                           ;Slave2.c: 70:             INTCONbits.RBIF=0;
   663  002A  100B               	bcf	11,0	;volatile
   664  002B                     i1l748:
   665                           
   666                           ;Slave2.c: 73:     if(SSPIF == 1){
   667  002B  1283               	bcf	3,5	;RP0=0, select bank0
   668  002C  1303               	bcf	3,6	;RP1=0, select bank0
   669  002D  1D8C               	btfss	12,3	;volatile
   670  002E  2830               	goto	u6_21
   671  002F  2831               	goto	u6_20
   672  0030                     u6_21:
   673  0030  2842               	goto	i1l90
   674  0031                     u6_20:
   675  0031                     i1l750:
   676                           
   677                           ;Slave2.c: 74:         SSPIF = 0;
   678  0031  118C               	bcf	12,3	;volatile
   679  0032                     i1l752:
   680                           
   681                           ;Slave2.c: 75:         putu=spiRead();
   682  0032  120A  118A  2090  120A  118A  	fcall	_spiRead
   683  0037  00F1               	movwf	??_ISR
   684  0038  0871               	movf	??_ISR,w
   685  0039  00F9               	movwf	_putu
   686                           
   687                           ;Slave2.c: 76:         spiWrite(PORTD);
   688  003A  1283               	bcf	3,5	;RP0=0, select bank0
   689  003B  1303               	bcf	3,6	;RP1=0, select bank0
   690  003C  0808               	movf	8,w	;volatile
   691  003D  120A  118A  20A0  120A  118A  	fcall	_spiWrite
   692  0042                     i1l90:
   693  0042  0873               	movf	??_ISR+2,w
   694  0043  008A               	movwf	10
   695  0044  0E72               	swapf	??_ISR+1,w
   696  0045  0083               	movwf	3
   697  0046  0EFE               	swapf	btemp,f
   698  0047  0E7E               	swapf	btemp,w
   699  0048  0009               	retfie
   700  0049                     __end_of_ISR:
   701                           
   702                           	psect	intentry
   703  0004                     __pintentry:	
   704                           ;incstack = 0
   705                           ; Regs used in _ISR: [wreg+status,2+status,0+pclath+cstack]
   706                           
   707  0004                     interrupt_function:
   708  007E                     saved_w	set	btemp
   709  0004  00FE               	movwf	btemp
   710  0005  0E03               	swapf	3,w
   711  0006  00F2               	movwf	??_ISR+1
   712  0007  080A               	movf	10,w
   713  0008  00F3               	movwf	??_ISR+2
   714  0009  120A  118A  2815   	ljmp	_ISR
   715                           
   716                           	psect	text4
   717  00A0                     __ptext4:	
   718 ;; *************** function _spiWrite *****************
   719 ;; Defined at:
   720 ;;		line 71 in file "./spi.h"
   721 ;; Parameters:    Size  Location     Type
   722 ;;  dat             1    wreg     unsigned char 
   723 ;; Auto vars:     Size  Location     Type
   724 ;;  dat             1    0[COMMON] unsigned char 
   725 ;; Return value:  Size  Location     Type
   726 ;;                  1    wreg      void 
   727 ;; Registers used:
   728 ;;		wreg
   729 ;; Tracked objects:
   730 ;;		On entry : 0/0
   731 ;;		On exit  : 0/0
   732 ;;		Unchanged: 0/0
   733 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   734 ;;      Params:         0       0       0       0       0
   735 ;;      Locals:         1       0       0       0       0
   736 ;;      Temps:          0       0       0       0       0
   737 ;;      Totals:         1       0       0       0       0
   738 ;;Total ram usage:        1 bytes
   739 ;; Hardware stack levels used:    1
   740 ;; This function calls:
   741 ;;		Nothing
   742 ;; This function is called by:
   743 ;;		_ISR
   744 ;; This function uses a non-reentrant model
   745 ;;
   746                           
   747                           
   748                           ;psect for function _spiWrite
   749  00A0                     _spiWrite:
   750                           
   751                           ;incstack = 0
   752                           ; Regs used in _spiWrite: [wreg]
   753                           ;spiWrite@dat stored from wreg
   754  00A0  00F0               	movwf	spiWrite@dat
   755  00A1                     i1l694:
   756                           
   757                           ;./spi.h: 71: void spiWrite(char dat);./spi.h: 72: {;./spi.h: 73:     SSPBUF = dat;
   758  00A1  0870               	movf	spiWrite@dat,w
   759  00A2  1283               	bcf	3,5	;RP0=0, select bank0
   760  00A3  1303               	bcf	3,6	;RP1=0, select bank0
   761  00A4  0093               	movwf	19	;volatile
   762  00A5                     i1l58:
   763  00A5  0008               	return
   764  00A6                     __end_of_spiWrite:
   765                           
   766                           	psect	text5
   767  0090                     __ptext5:	
   768 ;; *************** function _spiRead *****************
   769 ;; Defined at:
   770 ;;		line 84 in file "./spi.h"
   771 ;; Parameters:    Size  Location     Type
   772 ;;		None
   773 ;; Auto vars:     Size  Location     Type
   774 ;;		None
   775 ;; Return value:  Size  Location     Type
   776 ;;                  1    wreg      unsigned char 
   777 ;; Registers used:
   778 ;;		wreg, status,2, status,0, pclath, cstack
   779 ;; Tracked objects:
   780 ;;		On entry : 0/0
   781 ;;		On exit  : 0/0
   782 ;;		Unchanged: 0/0
   783 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   784 ;;      Params:         0       0       0       0       0
   785 ;;      Locals:         0       0       0       0       0
   786 ;;      Temps:          0       0       0       0       0
   787 ;;      Totals:         0       0       0       0       0
   788 ;;Total ram usage:        0 bytes
   789 ;; Hardware stack levels used:    1
   790 ;; Hardware stack levels required when called:    1
   791 ;; This function calls:
   792 ;;		_spiReceiveWait
   793 ;; This function is called by:
   794 ;;		_ISR
   795 ;; This function uses a non-reentrant model
   796 ;;
   797                           
   798                           
   799                           ;psect for function _spiRead
   800  0090                     _spiRead:
   801  0090                     i1l696:	
   802                           ;incstack = 0
   803                           ; Regs used in _spiRead: [wreg+status,2+status,0+pclath+cstack]
   804                           
   805                           
   806                           ;./spi.h: 86:     spiReceiveWait();
   807  0090  120A  118A  2099  120A  118A  	fcall	_spiReceiveWait
   808  0095                     i1l698:
   809                           
   810                           ;./spi.h: 87:     return(SSPBUF);
   811  0095  1283               	bcf	3,5	;RP0=0, select bank0
   812  0096  1303               	bcf	3,6	;RP1=0, select bank0
   813  0097  0813               	movf	19,w	;volatile
   814  0098                     i1l66:
   815  0098  0008               	return
   816  0099                     __end_of_spiRead:
   817                           
   818                           	psect	text6
   819  0099                     __ptext6:	
   820 ;; *************** function _spiReceiveWait *****************
   821 ;; Defined at:
   822 ;;		line 66 in file "./spi.h"
   823 ;; Parameters:    Size  Location     Type
   824 ;;		None
   825 ;; Auto vars:     Size  Location     Type
   826 ;;		None
   827 ;; Return value:  Size  Location     Type
   828 ;;                  1    wreg      void 
   829 ;; Registers used:
   830 ;;		None
   831 ;; Tracked objects:
   832 ;;		On entry : 0/0
   833 ;;		On exit  : 0/0
   834 ;;		Unchanged: 0/0
   835 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   836 ;;      Params:         0       0       0       0       0
   837 ;;      Locals:         0       0       0       0       0
   838 ;;      Temps:          0       0       0       0       0
   839 ;;      Totals:         0       0       0       0       0
   840 ;;Total ram usage:        0 bytes
   841 ;; Hardware stack levels used:    1
   842 ;; This function calls:
   843 ;;		Nothing
   844 ;; This function is called by:
   845 ;;		_spiRead
   846 ;; This function uses a non-reentrant model
   847 ;;
   848                           
   849                           
   850                           ;psect for function _spiReceiveWait
   851  0099                     _spiReceiveWait:
   852  0099                     i1l682:	
   853                           ;incstack = 0
   854                           ; Regs used in _spiReceiveWait: []
   855                           
   856  0099                     i1l52:	
   857                           ;./spi.h: 68:     while ( !SSPSTATbits.BF );
   858                           
   859  0099  1683               	bsf	3,5	;RP0=1, select bank1
   860  009A  1303               	bcf	3,6	;RP1=0, select bank1
   861  009B  1C14               	btfss	20,0	;volatile
   862  009C  289E               	goto	u1_21
   863  009D  289F               	goto	u1_20
   864  009E                     u1_21:
   865  009E  2899               	goto	i1l52
   866  009F                     u1_20:
   867  009F                     i1l55:
   868  009F  0008               	return
   869  00A0                     __end_of_spiReceiveWait:
   870  007E                     btemp	set	126	;btemp
   871  007E                     wtemp0	set	126
   872                           
   873                           	psect	config
   874                           
   875                           ;Config register CONFIG1 @ 0x2007
   876                           ;	Oscillator Selection bits
   877                           ;	FOSC = INTRC_NOCLKOUT, INTOSCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O f
      +                          unction on RA7/OSC1/CLKIN
   878                           ;	Watchdog Timer Enable bit
   879                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
   880                           ;	Power-up Timer Enable bit
   881                           ;	PWRTE = OFF, PWRT disabled
   882                           ;	RE3/MCLR pin function select bit
   883                           ;	MCLRE = OFF, RE3/MCLR pin function is digital input, MCLR internally tied to VDD
   884                           ;	Code Protection bit
   885                           ;	CP = OFF, Program memory code protection is disabled
   886                           ;	Data Code Protection bit
   887                           ;	CPD = OFF, Data memory code protection is disabled
   888                           ;	Brown Out Reset Selection bits
   889                           ;	BOREN = OFF, BOR disabled
   890                           ;	Internal External Switchover bit
   891                           ;	IESO = OFF, Internal/External Switchover mode is disabled
   892                           ;	Fail-Safe Clock Monitor Enabled bit
   893                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
   894                           ;	Low Voltage Programming Enable bit
   895                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
   896                           ;	In-Circuit Debugger Mode bit
   897                           ;	DEBUG = 0x1, unprogrammed default
   898  2007                     	org	8199
   899  2007  20D4               	dw	8404
   900                           
   901                           ;Config register CONFIG2 @ 0x2008
   902                           ;	Brown-out Reset Selection bit
   903                           ;	BOR4V = BOR40V, Brown-out Reset set to 4.0V
   904                           ;	Flash Program Memory Self Write Enable bits
   905                           ;	WRT = OFF, Write protection off
   906  2008                     	org	8200
   907  2008  3FFF               	dw	16383

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         2
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      10
    BANK0            80      0       0
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_spiInit

Critical Paths under _ISR in COMMON

    _ISR->_spiWrite

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     360
                              _setup
                            _spiInit
 ---------------------------------------------------------------------------------
 (1) _spiInit                                              4     1      3     360
                                              4 COMMON     4     1      3
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _ISR                                                  3     3      0      15
                                              1 COMMON     3     3      0
                            _spiRead
                           _spiWrite
 ---------------------------------------------------------------------------------
 (3) _spiWrite                                             1     1      0      15
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _spiRead                                              0     0      0       0
                     _spiReceiveWait
 ---------------------------------------------------------------------------------
 (4) _spiReceiveWait                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _setup
   _spiInit

 _ISR (ROOT)
   _spiRead
     _spiReceiveWait
   _spiWrite

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      8       A       1       71.4%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       A       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       A      12        0.0%


Microchip Technology PIC Macro Assembler V2.31 build 20201012212115 
Symbol Table                                                                                   Tue Feb 23 15:59:36 2021

            _SSPSTATbits 0094                       l48 008A                       l81 0063  
                     l49 008F                       u70 0082                       u71 0081  
                    l710 0054                      l702 0049                      l720 005C  
                    l712 0055                      l704 004F                      l722 0060  
                    l714 0058                      l706 0050                      l716 0059  
                    l708 0051                      l718 005A                      l760 0086  
                    l762 0089                      l754 007B                      l756 0082  
                    l764 0064                      l758 0084                      l766 0072  
                    _ISR 0015                     ?_ISR 0070                     _IOCB 0096  
                   _PIE1 008C                     i1l52 0099                     i1l55 009F  
                   i1l66 0098                     i1l58 00A5                     i1l90 0042  
                   u1_20 009F                     u1_21 009E                     u3_20 0019  
                   u3_21 0018                     u4_20 001F                     u4_21 001E  
                   u5_20 0028                     u5_21 0027                     u6_20 0031  
                   u6_21 0030                     _main 0064                     btemp 007E  
                   _putu 0079                     start 000C                    ??_ISR 0071  
                  ?_main 0070                    _ANSEL 0188                    i1l740 0023  
                  i1l750 0031                    i1l742 0024                    i1l734 0015  
                  i1l752 0032                    i1l744 0028                    i1l736 0019  
                  i1l682 0099                    i1l746 002A                    i1l738 001F  
                  i1l748 002B                    i1l694 00A1                    i1l696 0090  
                  i1l698 0095                    _PORTA 0005                    _PORTC 0007  
                  _PORTD 0008                    _TRISA 0085                    _TRISB 0086  
                  _TRISC 0087                    _TRISD 0088                    _SSPIF 0063  
                  _tempi 0078                    _setup 0049                    pclath 000A  
        __end_of_spiInit 0090          __end_of_spiRead 0099                    status 0003  
                  wtemp0 007E          __initialization 000F             __end_of_main 007A  
                 ??_main 0078                   ?_setup 0070                   _ANSELH 0189  
                 _INTCON 000B                   _TRISC3 043B                   _TRISC5 043D  
                 _SSPCON 0014                   _SSPBUF 0013                   saved_w 007E  
       __end_of_spiWrite 00A6                ??_spiInit 0077                ??_spiRead 0070  
__end_of__initialization 0011           __pcstackCOMMON 0070            __end_of_setup 0064  
                ??_setup 0074               __pmaintext 0064               __pintentry 0004  
__size_of_spiReceiveWait 0007                  _SSPSTAT 0094                ?_spiWrite 0070  
                __ptext1 007A                  __ptext2 0049                  __ptext3 0015  
                __ptext4 00A0                  __ptext5 0090                  __ptext6 0099  
           __size_of_ISR 0034                  _spiInit 007A                  _spiRead 0090  
   end_of_initialization 0011               ??_spiWrite 0070                _PORTBbits 0006  
            spiWrite@dat 0070           _spiReceiveWait 0099      start_initialization 000F  
            __end_of_ISR 0049   __end_of_spiReceiveWait 00A0              __pbssCOMMON 0078  
              ___latbits 0002          ?_spiReceiveWait 0070        __size_of_spiWrite 0006  
               ?_spiInit 0074                 ?_spiRead 0070           __size_of_setup 001B  
   spiInit@sTransmitEdge 0076        interrupt_function 0004       spiInit@sDataSample 0074  
       __size_of_spiInit 0016         __size_of_spiRead 0009            __size_of_main 0016  
               _spiWrite 00A0             spiInit@sType 0077        spiInit@sClockIdle 0075  
             _INTCONbits 000B                 intlevel1 0000         ??_spiReceiveWait 0070  



Microchip MPLAB XC8 Assembler V2.31 build 20201012212115 
                                                                                               Tue Feb 23 15:53:51 2021

Microchip MPLAB XC8 C Compiler v2.31 (Free license) build 20201012212115 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	maintext,global,class=CODE,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2,group=1
    12                           	psect	text2,local,class=CODE,merge=1,delta=2,group=3
    13                           	psect	text3,local,class=CODE,merge=1,delta=2,group=2
    14                           	psect	text4,local,class=CODE,merge=1,delta=2,group=2
    15                           	psect	text5,local,class=CODE,merge=1,delta=2,group=2
    16                           	psect	text6,local,class=CODE,merge=1,delta=2
    17                           	psect	text7,local,class=CODE,merge=1,delta=2
    18                           	psect	text8,local,class=CODE,merge=1,delta=2
    19                           	psect	text9,local,class=CODE,merge=1,delta=2
    20                           	psect	text10,local,class=CODE,merge=1,delta=2
    21                           	psect	text11,local,class=CODE,merge=1,delta=2
    22                           	psect	text12,local,class=CODE,merge=1,delta=2
    23                           	psect	text13,local,class=CODE,merge=1,delta=2
    24                           	psect	text14,local,class=CODE,merge=1,delta=2
    25                           	psect	text15,local,class=CODE,merge=1,delta=2
    26                           	psect	text16,local,class=CODE,merge=1,delta=2
    27                           	psect	text17,local,class=CODE,merge=1,delta=2
    28                           	psect	intentry,global,class=CODE,delta=2
    29                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    30                           	dabs	1,0x7E,2
    31  0000                     
    32                           ; Version 2.20
    33                           ; Generated 12/02/2020 GMT
    34                           ; 
    35                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    36                           ; All rights reserved.
    37                           ; 
    38                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    39                           ; 
    40                           ; Redistribution and use in source and binary forms, with or without modification, are
    41                           ; permitted provided that the following conditions are met:
    42                           ; 
    43                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    44                           ;        conditions and the following disclaimer.
    45                           ; 
    46                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    47                           ;        of conditions and the following disclaimer in the documentation and/or other
    48                           ;        materials provided with the distribution.
    49                           ; 
    50                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    51                           ;        software without specific prior written permission.
    52                           ; 
    53                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    54                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    55                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    56                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    57                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    58                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    59                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    60                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    61                           ; 
    62                           ; 
    63                           ; Code-generator required, PIC16F887 Definitions
    64                           ; 
    65                           ; SFR Addresses
    66  0000                     	;# 
    67  0001                     	;# 
    68  0002                     	;# 
    69  0003                     	;# 
    70  0004                     	;# 
    71  0005                     	;# 
    72  0006                     	;# 
    73  0007                     	;# 
    74  0008                     	;# 
    75  0009                     	;# 
    76  000A                     	;# 
    77  000B                     	;# 
    78  000C                     	;# 
    79  000D                     	;# 
    80  000E                     	;# 
    81  000E                     	;# 
    82  000F                     	;# 
    83  0010                     	;# 
    84  0011                     	;# 
    85  0012                     	;# 
    86  0013                     	;# 
    87  0014                     	;# 
    88  0015                     	;# 
    89  0015                     	;# 
    90  0016                     	;# 
    91  0017                     	;# 
    92  0018                     	;# 
    93  0019                     	;# 
    94  001A                     	;# 
    95  001B                     	;# 
    96  001B                     	;# 
    97  001C                     	;# 
    98  001D                     	;# 
    99  001E                     	;# 
   100  001F                     	;# 
   101  0081                     	;# 
   102  0085                     	;# 
   103  0086                     	;# 
   104  0087                     	;# 
   105  0088                     	;# 
   106  0089                     	;# 
   107  008C                     	;# 
   108  008D                     	;# 
   109  008E                     	;# 
   110  008F                     	;# 
   111  0090                     	;# 
   112  0091                     	;# 
   113  0092                     	;# 
   114  0093                     	;# 
   115  0093                     	;# 
   116  0093                     	;# 
   117  0094                     	;# 
   118  0095                     	;# 
   119  0096                     	;# 
   120  0097                     	;# 
   121  0098                     	;# 
   122  0099                     	;# 
   123  009A                     	;# 
   124  009B                     	;# 
   125  009C                     	;# 
   126  009D                     	;# 
   127  009E                     	;# 
   128  009F                     	;# 
   129  0105                     	;# 
   130  0107                     	;# 
   131  0108                     	;# 
   132  0109                     	;# 
   133  010C                     	;# 
   134  010C                     	;# 
   135  010D                     	;# 
   136  010E                     	;# 
   137  010F                     	;# 
   138  0185                     	;# 
   139  0187                     	;# 
   140  0188                     	;# 
   141  0189                     	;# 
   142  018C                     	;# 
   143  018D                     	;# 
   144  0000                     	;# 
   145  0001                     	;# 
   146  0002                     	;# 
   147  0003                     	;# 
   148  0004                     	;# 
   149  0005                     	;# 
   150  0006                     	;# 
   151  0007                     	;# 
   152  0008                     	;# 
   153  0009                     	;# 
   154  000A                     	;# 
   155  000B                     	;# 
   156  000C                     	;# 
   157  000D                     	;# 
   158  000E                     	;# 
   159  000E                     	;# 
   160  000F                     	;# 
   161  0010                     	;# 
   162  0011                     	;# 
   163  0012                     	;# 
   164  0013                     	;# 
   165  0014                     	;# 
   166  0015                     	;# 
   167  0015                     	;# 
   168  0016                     	;# 
   169  0017                     	;# 
   170  0018                     	;# 
   171  0019                     	;# 
   172  001A                     	;# 
   173  001B                     	;# 
   174  001B                     	;# 
   175  001C                     	;# 
   176  001D                     	;# 
   177  001E                     	;# 
   178  001F                     	;# 
   179  0081                     	;# 
   180  0085                     	;# 
   181  0086                     	;# 
   182  0087                     	;# 
   183  0088                     	;# 
   184  0089                     	;# 
   185  008C                     	;# 
   186  008D                     	;# 
   187  008E                     	;# 
   188  008F                     	;# 
   189  0090                     	;# 
   190  0091                     	;# 
   191  0092                     	;# 
   192  0093                     	;# 
   193  0093                     	;# 
   194  0093                     	;# 
   195  0094                     	;# 
   196  0095                     	;# 
   197  0096                     	;# 
   198  0097                     	;# 
   199  0098                     	;# 
   200  0099                     	;# 
   201  009A                     	;# 
   202  009B                     	;# 
   203  009C                     	;# 
   204  009D                     	;# 
   205  009E                     	;# 
   206  009F                     	;# 
   207  0105                     	;# 
   208  0107                     	;# 
   209  0108                     	;# 
   210  0109                     	;# 
   211  010C                     	;# 
   212  010C                     	;# 
   213  010D                     	;# 
   214  010E                     	;# 
   215  010F                     	;# 
   216  0185                     	;# 
   217  0187                     	;# 
   218  0188                     	;# 
   219  0189                     	;# 
   220  018C                     	;# 
   221  018D                     	;# 
   222                           
   223                           	psect	strings
   224  0233                     __pstrings:
   225  0233                     stringtab:
   226  0233                     __stringtab:
   227                           
   228                           ;	String table - string pointers are 1 byte each
   229  0233  1BFF               	btfsc	btemp+1,7
   230  0234  2A3D               	ljmp	stringcode
   231  0235  1383               	bcf	3,7
   232  0236  187F               	btfsc	btemp+1,0
   233  0237  1783               	bsf	3,7
   234  0238  0800               	movf	0,w
   235  0239  0A84               	incf	4,f
   236  023A  1903               	skipnz
   237  023B  0AFF               	incf	btemp+1,f
   238  023C  0008               	return
   239  023D                     stringcode:
   240  023D                     stringdir:
   241  023D  3002               	movlw	high stringdir
   242  023E  008A               	movwf	10
   243  023F  0804               	movf	4,w
   244  0240  0A84               	incf	4,f
   245  0241  0782               	addwf	2,f
   246  0242                     __stringbase:
   247  0242  3400               	retlw	0
   248  0243                     __end_of__stringtab:
   249  0243                     _dpowers:
   250  0243  3401               	retlw	1
   251  0244  3400               	retlw	0
   252  0245  340A               	retlw	10
   253  0246  3400               	retlw	0
   254  0247  3464               	retlw	100
   255  0248  3400               	retlw	0
   256  0249  34E8               	retlw	232
   257  024A  3403               	retlw	3
   258  024B  3410               	retlw	16
   259  024C  3427               	retlw	39
   260  024D                     __end_of_dpowers:
   261  0008                     _PORTD	set	8
   262  0006                     _PORTB	set	6
   263  0005                     _PORTA	set	5
   264  000B                     _INTCON	set	11
   265  0006                     _PORTBbits	set	6
   266  0013                     _SSPBUF	set	19
   267  0014                     _SSPCON	set	20
   268  0063                     _SSPIF	set	99
   269  004A                     _RE2	set	74
   270  0049                     _RE1	set	73
   271  0047                     _RD7	set	71
   272  0046                     _RD6	set	70
   273  0045                     _RD5	set	69
   274  0044                     _RD4	set	68
   275  0043                     _RD3	set	67
   276  0042                     _RD2	set	66
   277  0041                     _RD1	set	65
   278  0040                     _RD0	set	64
   279  0089                     _TRISE	set	137
   280  0088                     _TRISD	set	136
   281  0086                     _TRISB	set	134
   282  0085                     _TRISA	set	133
   283  0094                     _SSPSTATbits	set	148
   284  0094                     _SSPSTAT	set	148
   285  043B                     _TRISC3	set	1083
   286  043D                     _TRISC5	set	1085
   287  0189                     _ANSELH	set	393
   288  0188                     _ANSEL	set	392
   289  024D                     STR_5:
   290  024D  3477               	retlw	119	;'w'
   291  024E  3477               	retlw	119	;'w'
   292  024F  3477               	retlw	119	;'w'
   293  0250  342E               	retlw	46	;'.'
   294  0251  3465               	retlw	101	;'e'
   295  0252  346C               	retlw	108	;'l'
   296  0253  3465               	retlw	101	;'e'
   297  0254  3463               	retlw	99	;'c'
   298  0255  3474               	retlw	116	;'t'
   299  0256  3472               	retlw	114	;'r'
   300  0257  346F               	retlw	111	;'o'
   301  0258  3453               	retlw	83	;'S'
   302  0259  346F               	retlw	111	;'o'
   303  025A  346D               	retlw	109	;'m'
   304  025B  3465               	retlw	101	;'e'
   305  025C  342E               	retlw	46	;'.'
   306  025D  3463               	retlw	99	;'c'
   307  025E  346F               	retlw	111	;'o'
   308  025F  346D               	retlw	109	;'m'
   309  0260  3400               	retlw	0
   310  0261                     STR_7:
   311  0261  3420               	retlw	32	;' '
   312  0262  3425               	retlw	37	;'%'
   313  0263  3433               	retlw	51	;'3'
   314  0264  3469               	retlw	105	;'i'
   315  0265  3420               	retlw	32	;' '
   316  0266  3420               	retlw	32	;' '
   317  0267  3420               	retlw	32	;' '
   318  0268  3425               	retlw	37	;'%'
   319  0269  3433               	retlw	51	;'3'
   320  026A  3469               	retlw	105	;'i'
   321  026B  3420               	retlw	32	;' '
   322  026C  3420               	retlw	32	;' '
   323  026D  3420               	retlw	32	;' '
   324  026E  3425               	retlw	37	;'%'
   325  026F  3433               	retlw	51	;'3'
   326  0270  3469               	retlw	105	;'i'
   327  0271  3400               	retlw	0
   328  0272                     STR_1:
   329  0272  344C               	retlw	76	;'L'
   330  0273  3443               	retlw	67	;'C'
   331  0274  3444               	retlw	68	;'D'
   332  0275  3420               	retlw	32	;' '
   333  0276  344C               	retlw	76	;'L'
   334  0277  3469               	retlw	105	;'i'
   335  0278  3462               	retlw	98	;'b'
   336  0279  3472               	retlw	114	;'r'
   337  027A  3461               	retlw	97	;'a'
   338  027B  3472               	retlw	114	;'r'
   339  027C  3479               	retlw	121	;'y'
   340  027D  3420               	retlw	32	;' '
   341  027E  3466               	retlw	102	;'f'
   342  027F  346F               	retlw	111	;'o'
   343  0280  3472               	retlw	114	;'r'
   344  0281  3400               	retlw	0
   345  0282                     STR_6:
   346  0282  3441               	retlw	65	;'A'
   347  0283  3444               	retlw	68	;'D'
   348  0284  3443               	retlw	67	;'C'
   349  0285  3420               	retlw	32	;' '
   350  0286  3443               	retlw	67	;'C'
   351  0287  344F               	retlw	79	;'O'
   352  0288  344E               	retlw	78	;'N'
   353  0289  3454               	retlw	84	;'T'
   354  028A  3420               	retlw	32	;' '
   355  028B  3420               	retlw	32	;' '
   356  028C  3454               	retlw	84	;'T'
   357  028D  3445               	retlw	69	;'E'
   358  028E  344D               	retlw	77	;'M'
   359  028F  3450               	retlw	80	;'P'
   360  0290  3400               	retlw	0
   361  0291                     STR_3:
   362  0291  3444               	retlw	68	;'D'
   363  0292  3465               	retlw	101	;'e'
   364  0293  3476               	retlw	118	;'v'
   365  0294  3465               	retlw	101	;'e'
   366  0295  346C               	retlw	108	;'l'
   367  0296  346F               	retlw	111	;'o'
   368  0297  3470               	retlw	112	;'p'
   369  0298  3465               	retlw	101	;'e'
   370  0299  3464               	retlw	100	;'d'
   371  029A  3420               	retlw	32	;' '
   372  029B  3442               	retlw	66	;'B'
   373  029C  3479               	retlw	121	;'y'
   374  029D  3400               	retlw	0
   375  029E                     STR_4:
   376  029E  3465               	retlw	101	;'e'
   377  029F  346C               	retlw	108	;'l'
   378  02A0  3465               	retlw	101	;'e'
   379  02A1  3463               	retlw	99	;'c'
   380  02A2  3474               	retlw	116	;'t'
   381  02A3  3472               	retlw	114	;'r'
   382  02A4  346F               	retlw	111	;'o'
   383  02A5  3453               	retlw	83	;'S'
   384  02A6  346F               	retlw	111	;'o'
   385  02A7  346D               	retlw	109	;'m'
   386  02A8  3465               	retlw	101	;'e'
   387  02A9  3400               	retlw	0
   388  02AA                     STR_2:
   389  02AA  344D               	retlw	77	;'M'
   390  02AB  3450               	retlw	80	;'P'
   391  02AC  344C               	retlw	76	;'L'
   392  02AD  3441               	retlw	65	;'A'
   393  02AE  3442               	retlw	66	;'B'
   394  02AF  3420               	retlw	32	;' '
   395  02B0  3458               	retlw	88	;'X'
   396  02B1  3443               	retlw	67	;'C'
   397  02B2  3438               	retlw	56	;'8'
   398  02B3  3400               	retlw	0
   399                           
   400                           	psect	cinit
   401  000F                     start_initialization:	
   402                           ; #config settings
   403                           
   404  000F                     __initialization:
   405                           
   406                           ; Clear objects allocated to COMMON
   407  000F  01FB               	clrf	__pbssCOMMON& (0+127)
   408                           
   409                           ; Clear objects allocated to BANK0
   410  0010  1283               	bcf	3,5	;RP0=0, select bank0
   411  0011  1303               	bcf	3,6	;RP1=0, select bank0
   412  0012  01CF               	clrf	__pbssBANK0& (0+127)
   413  0013  01D0               	clrf	(__pbssBANK0+1)& (0+127)
   414  0014  01D1               	clrf	(__pbssBANK0+2)& (0+127)
   415  0015                     end_of_initialization:	
   416                           ;End of C runtime variable initialization code
   417                           
   418  0015                     __end_of__initialization:
   419  0015  0183               	clrf	3
   420  0016  120A  118A  29A1   	ljmp	_main	;jump to C main() function
   421                           
   422                           	psect	bssCOMMON
   423  007B                     __pbssCOMMON:
   424  007B                     _DATAS:
   425  007B                     	ds	1
   426                           
   427                           	psect	bssBANK0
   428  004F                     __pbssBANK0:
   429  004F                     _SLAVE3:
   430  004F                     	ds	1
   431  0050                     _SLAVE2:
   432  0050                     	ds	1
   433  0051                     _SLAVE1:
   434  0051                     	ds	1
   435                           
   436                           	psect	cstackCOMMON
   437  0070                     __pcstackCOMMON:
   438  0070                     ?_isdigit:
   439  0070                     ?_setup:	
   440                           ; 1 bit 
   441                           
   442  0070                     ?_spiReceiveWait:	
   443                           ; 1 bytes @ 0x0
   444                           
   445  0070                     ?_spiWrite:	
   446                           ; 1 bytes @ 0x0
   447                           
   448  0070                     ?_spiRead:	
   449                           ; 1 bytes @ 0x0
   450                           
   451  0070                     ?_Lcd_Port:	
   452                           ; 1 bytes @ 0x0
   453                           
   454  0070                     ?_Lcd_Cmd:	
   455                           ; 1 bytes @ 0x0
   456                           
   457  0070                     ?_Lcd_Init:	
   458                           ; 1 bytes @ 0x0
   459                           
   460  0070                     ?_Lcd_Write_Char:	
   461                           ; 1 bytes @ 0x0
   462                           
   463  0070                     ?_main:	
   464                           ; 1 bytes @ 0x0
   465                           
   466  0070                     ?_ISR:	
   467                           ; 1 bytes @ 0x0
   468                           
   469  0070                     ??_ISR:	
   470                           ; 1 bytes @ 0x0
   471                           
   472                           
   473                           ; 1 bytes @ 0x0
   474  0070                     	ds	2
   475  0072                     ??_setup:
   476  0072                     ??_isdigit:	
   477                           ; 1 bytes @ 0x2
   478                           
   479  0072                     ?_spiInit:	
   480                           ; 1 bytes @ 0x2
   481                           
   482  0072                     ??_spiReceiveWait:	
   483                           ; 1 bytes @ 0x2
   484                           
   485  0072                     ??_spiWrite:	
   486                           ; 1 bytes @ 0x2
   487                           
   488  0072                     ??_spiRead:	
   489                           ; 1 bytes @ 0x2
   490                           
   491  0072                     ??_Lcd_Port:	
   492                           ; 1 bytes @ 0x2
   493                           
   494  0072                     ?___wmul:	
   495                           ; 1 bytes @ 0x2
   496                           
   497  0072                     ?___lwdiv:	
   498                           ; 2 bytes @ 0x2
   499                           
   500  0072                     spiInit@sDataSample:	
   501                           ; 2 bytes @ 0x2
   502                           
   503  0072                     spiWrite@dat:	
   504                           ; 1 bytes @ 0x2
   505                           
   506  0072                     Lcd_Port@a:	
   507                           ; 1 bytes @ 0x2
   508                           
   509  0072                     _isdigit$748:	
   510                           ; 1 bytes @ 0x2
   511                           
   512  0072                     ___wmul@multiplier:	
   513                           ; 1 bytes @ 0x2
   514                           
   515  0072                     ___lwdiv@divisor:	
   516                           ; 2 bytes @ 0x2
   517                           
   518                           
   519                           ; 2 bytes @ 0x2
   520  0072                     	ds	1
   521  0073                     ??_Lcd_Cmd:
   522  0073                     ??_Lcd_Write_Char:	
   523                           ; 1 bytes @ 0x3
   524                           
   525  0073                     spiInit@sClockIdle:	
   526                           ; 1 bytes @ 0x3
   527                           
   528  0073                     isdigit@c:	
   529                           ; 1 bytes @ 0x3
   530                           
   531                           
   532                           ; 1 bytes @ 0x3
   533  0073                     	ds	1
   534  0074                     spiInit@sTransmitEdge:
   535  0074                     ___wmul@multiplicand:	
   536                           ; 1 bytes @ 0x4
   537                           
   538  0074                     ___lwdiv@dividend:	
   539                           ; 2 bytes @ 0x4
   540                           
   541                           
   542                           ; 2 bytes @ 0x4
   543  0074                     	ds	1
   544  0075                     ??_spiInit:
   545  0075                     spiInit@sType:	
   546                           ; 1 bytes @ 0x5
   547                           
   548  0075                     Lcd_Cmd@a:	
   549                           ; 1 bytes @ 0x5
   550                           
   551  0075                     Lcd_Write_Char@a:	
   552                           ; 1 bytes @ 0x5
   553                           
   554                           
   555                           ; 1 bytes @ 0x5
   556  0075                     	ds	1
   557  0076                     ?_Lcd_Set_Cursor:
   558  0076                     ??_Lcd_Init:	
   559                           ; 1 bytes @ 0x6
   560                           
   561  0076                     ?_Lcd_Write_String:	
   562                           ; 1 bytes @ 0x6
   563                           
   564  0076                     ??___wmul:	
   565                           ; 1 bytes @ 0x6
   566                           
   567  0076                     ??___lwdiv:	
   568                           ; 1 bytes @ 0x6
   569                           
   570  0076                     Lcd_Set_Cursor@b:	
   571                           ; 1 bytes @ 0x6
   572                           
   573  0076                     Lcd_Write_String@a:	
   574                           ; 1 bytes @ 0x6
   575                           
   576  0076                     ___wmul@product:	
   577                           ; 2 bytes @ 0x6
   578                           
   579                           
   580                           ; 2 bytes @ 0x6
   581  0076                     	ds	1
   582  0077                     ??_Lcd_Set_Cursor:
   583  0077                     ___lwdiv@quotient:	
   584                           ; 1 bytes @ 0x7
   585                           
   586                           
   587                           ; 2 bytes @ 0x7
   588  0077                     	ds	1
   589  0078                     ??_Lcd_Write_String:
   590  0078                     Lcd_Set_Cursor@a:	
   591                           ; 1 bytes @ 0x8
   592                           
   593                           
   594                           ; 1 bytes @ 0x8
   595  0078                     	ds	1
   596  0079                     Lcd_Set_Cursor@temp:
   597  0079                     ___lwdiv@counter:	
   598                           ; 1 bytes @ 0x9
   599                           
   600                           
   601                           ; 1 bytes @ 0x9
   602  0079                     	ds	1
   603  007A                     ??___lwmod:
   604                           
   605                           ; 1 bytes @ 0xA
   606  007A                     	ds	1
   607                           
   608                           	psect	cstackBANK0
   609  0020                     __pcstackBANK0:
   610  0020                     ?___lwmod:
   611  0020                     Lcd_Write_String@i:	
   612                           ; 2 bytes @ 0x0
   613                           
   614  0020                     ___lwmod@divisor:	
   615                           ; 2 bytes @ 0x0
   616                           
   617                           
   618                           ; 2 bytes @ 0x0
   619  0020                     	ds	2
   620  0022                     ___lwmod@dividend:
   621                           
   622                           ; 2 bytes @ 0x2
   623  0022                     	ds	2
   624  0024                     ___lwmod@counter:
   625                           
   626                           ; 1 bytes @ 0x4
   627  0024                     	ds	1
   628  0025                     ?_sprintf:
   629  0025                     sprintf@f:	
   630                           ; 2 bytes @ 0x5
   631                           
   632                           
   633                           ; 1 bytes @ 0x5
   634  0025                     	ds	7
   635  002C                     ??_sprintf:
   636                           
   637                           ; 1 bytes @ 0xC
   638  002C                     	ds	3
   639  002F                     sprintf@ap:
   640                           
   641                           ; 1 bytes @ 0xF
   642  002F                     	ds	1
   643  0030                     sprintf@prec:
   644                           
   645                           ; 1 bytes @ 0x10
   646  0030                     	ds	1
   647  0031                     sprintf@flag:
   648                           
   649                           ; 1 bytes @ 0x11
   650  0031                     	ds	1
   651  0032                     sprintf@val:
   652                           
   653                           ; 2 bytes @ 0x12
   654  0032                     	ds	2
   655  0034                     sprintf@sp:
   656                           
   657                           ; 1 bytes @ 0x14
   658  0034                     	ds	1
   659  0035                     sprintf@width:
   660                           
   661                           ; 2 bytes @ 0x15
   662  0035                     	ds	2
   663  0037                     sprintf@c:
   664                           
   665                           ; 1 bytes @ 0x17
   666  0037                     	ds	1
   667  0038                     ??_main:
   668                           
   669                           ; 1 bytes @ 0x18
   670  0038                     	ds	7
   671  003F                     main@s:
   672                           
   673                           ; 16 bytes @ 0x1F
   674  003F                     	ds	16
   675                           
   676                           	psect	maintext
   677  01A1                     __pmaintext:	
   678 ;;
   679 ;;Main: autosize = 0, tempsize = 7, incstack = 0, save=0
   680 ;;
   681 ;; *************** function _main *****************
   682 ;; Defined at:
   683 ;;		line 57 in file "Master.c"
   684 ;; Parameters:    Size  Location     Type
   685 ;;		None
   686 ;; Auto vars:     Size  Location     Type
   687 ;;  s              16   31[BANK0 ] unsigned char [16]
   688 ;; Return value:  Size  Location     Type
   689 ;;                  1    wreg      void 
   690 ;; Registers used:
   691 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   692 ;; Tracked objects:
   693 ;;		On entry : B00/0
   694 ;;		On exit  : 0/0
   695 ;;		Unchanged: 0/0
   696 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   697 ;;      Params:         0       0       0       0       0
   698 ;;      Locals:         0      16       0       0       0
   699 ;;      Temps:          0       7       0       0       0
   700 ;;      Totals:         0      23       0       0       0
   701 ;;Total ram usage:       23 bytes
   702 ;; Hardware stack levels required when called:    4
   703 ;; This function calls:
   704 ;;		_Lcd_Init
   705 ;;		_Lcd_Set_Cursor
   706 ;;		_Lcd_Write_String
   707 ;;		_setup
   708 ;;		_spiInit
   709 ;;		_spiRead
   710 ;;		_spiWrite
   711 ;;		_sprintf
   712 ;; This function is called by:
   713 ;;		Startup code after reset
   714 ;; This function uses a non-reentrant model
   715 ;;
   716                           
   717                           
   718                           ;psect for function _main
   719  01A1                     _main:
   720  01A1                     l1657:	
   721                           ;incstack = 0
   722                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   723                           
   724                           
   725                           ;Master.c: 58:     setup();
   726  01A1  120A  118A  2490  120A  118A  	fcall	_setup
   727                           
   728                           ;Master.c: 59:     Lcd_Init();
   729  01A6  120A  118A  22FA  120A  118A  	fcall	_Lcd_Init
   730                           
   731                           ;Master.c: 60:     char s[16];;Master.c: 61:     spiInit(SPI_MASTER_OSC_DIV4, SPI_DATA_S
      +                          AMPLE_MIDDLE, SPI_CLOCK_IDLE_LOW, SPI_IDLE_2_ACTIVE);
   732  01AB  01F2               	clrf	spiInit@sDataSample
   733  01AC  01F3               	clrf	spiInit@sClockIdle
   734  01AD  01F4               	clrf	spiInit@sTransmitEdge
   735  01AE  3020               	movlw	32
   736  01AF  120A  118A  247A  120A  118A  	fcall	_spiInit
   737  01B4                     l1659:
   738                           
   739                           ;Master.c: 64:         PORTBbits.RB0=0;
   740  01B4  1283               	bcf	3,5	;RP0=0, select bank0
   741  01B5  1303               	bcf	3,6	;RP1=0, select bank0
   742  01B6  1006               	bcf	6,0	;volatile
   743                           
   744                           ;Master.c: 65:         spiWrite(0);
   745  01B7  3000               	movlw	0
   746  01B8  120A  118A  24D3  120A  118A  	fcall	_spiWrite
   747                           
   748                           ;Master.c: 66:         SLAVE1=spiRead();
   749  01BD  120A  118A  24C3  120A  118A  	fcall	_spiRead
   750  01C2  1283               	bcf	3,5	;RP0=0, select bank0
   751  01C3  1303               	bcf	3,6	;RP1=0, select bank0
   752  01C4  00B8               	movwf	??_main
   753  01C5  0838               	movf	??_main,w
   754  01C6  00D1               	movwf	_SLAVE1
   755  01C7                     l1661:
   756                           
   757                           ;Master.c: 67:         PORTBbits.RB0=1;
   758  01C7  1406               	bsf	6,0	;volatile
   759  01C8                     l1663:
   760                           
   761                           ;Master.c: 68:         PORTBbits.RB1=0;
   762  01C8  1086               	bcf	6,1	;volatile
   763                           
   764                           ;Master.c: 69:         spiWrite(255);
   765  01C9  30FF               	movlw	255
   766  01CA  120A  118A  24D3  120A  118A  	fcall	_spiWrite
   767                           
   768                           ;Master.c: 70:         SLAVE2=spiRead();
   769  01CF  120A  118A  24C3  120A  118A  	fcall	_spiRead
   770  01D4  1283               	bcf	3,5	;RP0=0, select bank0
   771  01D5  1303               	bcf	3,6	;RP1=0, select bank0
   772  01D6  00B8               	movwf	??_main
   773  01D7  0838               	movf	??_main,w
   774  01D8  00D0               	movwf	_SLAVE2
   775  01D9                     l1665:
   776                           
   777                           ;Master.c: 71:         PORTBbits.RB1=1;
   778  01D9  1486               	bsf	6,1	;volatile
   779  01DA                     l1667:
   780                           
   781                           ;Master.c: 72:         PORTBbits.RB2=0;
   782  01DA  1106               	bcf	6,2	;volatile
   783                           
   784                           ;Master.c: 73:         spiWrite(100);
   785  01DB  3064               	movlw	100
   786  01DC  120A  118A  24D3  120A  118A  	fcall	_spiWrite
   787                           
   788                           ;Master.c: 74:         SLAVE3=spiRead();
   789  01E1  120A  118A  24C3  120A  118A  	fcall	_spiRead
   790  01E6  1283               	bcf	3,5	;RP0=0, select bank0
   791  01E7  1303               	bcf	3,6	;RP1=0, select bank0
   792  01E8  00B8               	movwf	??_main
   793  01E9  0838               	movf	??_main,w
   794  01EA  00CF               	movwf	_SLAVE3
   795  01EB                     l1669:
   796                           
   797                           ;Master.c: 75:         PORTBbits.RB2=1;
   798  01EB  1506               	bsf	6,2	;volatile
   799                           
   800                           ;Master.c: 76:         Lcd_Set_Cursor(1,1);
   801  01EC  01F6               	clrf	Lcd_Set_Cursor@b
   802  01ED  0AF6               	incf	Lcd_Set_Cursor@b,f
   803  01EE  3001               	movlw	1
   804  01EF  120A  118A  2422  120A  118A  	fcall	_Lcd_Set_Cursor
   805  01F4                     l1671:
   806                           
   807                           ;Master.c: 77:         Lcd_Write_String("ADC CONT  TEMP");
   808  01F4  3040               	movlw	(low ((STR_6-__stringbase)| (0+32768)))& (0+255)
   809  01F5  00F6               	movwf	Lcd_Write_String@a
   810  01F6  3080               	movlw	128
   811  01F7  00F7               	movwf	Lcd_Write_String@a+1
   812  01F8  120A  118A  22B4  120A  118A  	fcall	_Lcd_Write_String
   813  01FD                     l1673:
   814                           
   815                           ;Master.c: 78:         Lcd_Set_Cursor(2,1);
   816  01FD  01F6               	clrf	Lcd_Set_Cursor@b
   817  01FE  0AF6               	incf	Lcd_Set_Cursor@b,f
   818  01FF  3002               	movlw	2
   819  0200  120A  118A  2422  120A  118A  	fcall	_Lcd_Set_Cursor
   820                           
   821                           ;Master.c: 79:         sprintf(s," %3i   %3i   %3i",SLAVE1, SLAVE2, SLAVE3);
   822  0205  301F               	movlw	(low ((STR_7-__stringbase)| (0+32768)))& (0+255)
   823  0206  1283               	bcf	3,5	;RP0=0, select bank0
   824  0207  1303               	bcf	3,6	;RP1=0, select bank0
   825  0208  00B8               	movwf	??_main
   826  0209  0838               	movf	??_main,w
   827  020A  00A5               	movwf	sprintf@f
   828  020B  0851               	movf	_SLAVE1,w
   829  020C  00B9               	movwf	??_main+1
   830  020D  01BA               	clrf	??_main+2
   831  020E  0839               	movf	??_main+1,w
   832  020F  00A6               	movwf	?_sprintf+1
   833  0210  083A               	movf	??_main+2,w
   834  0211  00A7               	movwf	?_sprintf+2
   835  0212  0850               	movf	_SLAVE2,w
   836  0213  00BB               	movwf	??_main+3
   837  0214  01BC               	clrf	??_main+4
   838  0215  083B               	movf	??_main+3,w
   839  0216  00A8               	movwf	?_sprintf+3
   840  0217  083C               	movf	??_main+4,w
   841  0218  00A9               	movwf	?_sprintf+4
   842  0219  084F               	movf	_SLAVE3,w
   843  021A  00BD               	movwf	??_main+5
   844  021B  01BE               	clrf	??_main+6
   845  021C  083D               	movf	??_main+5,w
   846  021D  00AA               	movwf	?_sprintf+5
   847  021E  083E               	movf	??_main+6,w
   848  021F  00AB               	movwf	?_sprintf+6
   849  0220  303F               	movlw	(low (main@s| 0))& (0+255)
   850  0221  120A  118A  2019  120A  118A  	fcall	_sprintf
   851                           
   852                           ;Master.c: 80:         Lcd_Write_String(s);
   853  0226  303F               	movlw	(low (main@s| 0))& (0+255)
   854  0227  00F6               	movwf	Lcd_Write_String@a
   855  0228  3000               	movlw	0
   856  0229  00F7               	movwf	Lcd_Write_String@a+1
   857  022A  120A  118A  22B4  120A  118A  	fcall	_Lcd_Write_String
   858  022F  29B4               	goto	l1659
   859  0230  120A  118A  280C   	ljmp	start
   860  0233                     __end_of_main:
   861                           
   862                           	psect	text1
   863  0019                     __ptext1:	
   864 ;; *************** function _sprintf *****************
   865 ;; Defined at:
   866 ;;		line 505 in file "D:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c"
   867 ;; Parameters:    Size  Location     Type
   868 ;;  sp              1    wreg     PTR unsigned char 
   869 ;;		 -> main@s(16), 
   870 ;;  f               1    5[BANK0 ] PTR const unsigned char 
   871 ;;		 -> STR_7(17), 
   872 ;; Auto vars:     Size  Location     Type
   873 ;;  sp              1   20[BANK0 ] PTR unsigned char 
   874 ;;		 -> main@s(16), 
   875 ;;  tmpval          4    0        struct .
   876 ;;  width           2   21[BANK0 ] int 
   877 ;;  val             2   18[BANK0 ] unsigned int 
   878 ;;  cp              2    0        PTR const unsigned char 
   879 ;;  len             2    0        unsigned int 
   880 ;;  c               1   23[BANK0 ] unsigned char 
   881 ;;  flag            1   17[BANK0 ] unsigned char 
   882 ;;  prec            1   16[BANK0 ] char 
   883 ;;  ap              1   15[BANK0 ] PTR void [1]
   884 ;;		 -> ?_sprintf(2), 
   885 ;; Return value:  Size  Location     Type
   886 ;;                  2    5[BANK0 ] int 
   887 ;; Registers used:
   888 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   889 ;; Tracked objects:
   890 ;;		On entry : 0/0
   891 ;;		On exit  : 0/0
   892 ;;		Unchanged: 0/0
   893 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   894 ;;      Params:         0       7       0       0       0
   895 ;;      Locals:         0       9       0       0       0
   896 ;;      Temps:          0       3       0       0       0
   897 ;;      Totals:         0      19       0       0       0
   898 ;;Total ram usage:       19 bytes
   899 ;; Hardware stack levels used:    1
   900 ;; Hardware stack levels required when called:    2
   901 ;; This function calls:
   902 ;;		___lwdiv
   903 ;;		___lwmod
   904 ;;		___wmul
   905 ;;		_isdigit
   906 ;; This function is called by:
   907 ;;		_main
   908 ;; This function uses a non-reentrant model
   909 ;;
   910                           
   911                           
   912                           ;psect for function _sprintf
   913  0019                     _sprintf:
   914                           
   915                           ;incstack = 0
   916                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   917                           ;sprintf@sp stored from wreg
   918  0019  1283               	bcf	3,5	;RP0=0, select bank0
   919  001A  1303               	bcf	3,6	;RP1=0, select bank0
   920  001B  00B4               	movwf	sprintf@sp
   921  001C                     l1565:
   922                           
   923                           ;D:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 505: sprintf(char
      +                           * sp, const char * f, ...);D:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\
      +                          doprnt.c: 506: {;D:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 5
      +                          07:  va_list ap;;D:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 5
      +                          12:  char c;;D:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 514: 
      +                           int width;;D:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 521:  
      +                          signed char prec;
   924  001C  3026               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
   925  001D  00AC               	movwf	??_sprintf
   926  001E  082C               	movf	??_sprintf,w
   927  001F  00AF               	movwf	sprintf@ap
   928                           
   929                           ;D:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
   930  0020  298A               	goto	l1647
   931  0021                     l1567:
   932                           
   933                           ;D:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 555:   if(c != '%
      +                          ')
   934  0021  3025               	movlw	37
   935  0022  0637               	xorwf	sprintf@c,w
   936  0023  1903               	btfsc	3,2
   937  0024  2826               	goto	u1081
   938  0025  2827               	goto	u1080
   939  0026                     u1081:
   940  0026  2833               	goto	l1573
   941  0027                     u1080:
   942  0027                     l1569:
   943                           
   944                           ;D:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 557:   {;D:\Progr
      +                          am Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 558:    ((*sp++ = (c)));
   945  0027  0837               	movf	sprintf@c,w
   946  0028  00AC               	movwf	??_sprintf
   947  0029  0834               	movf	sprintf@sp,w
   948  002A  0084               	movwf	4
   949  002B  082C               	movf	??_sprintf,w
   950  002C  1383               	bcf	3,7	;select IRP bank0
   951  002D  0080               	movwf	0
   952  002E                     l1571:
   953  002E  3001               	movlw	1
   954  002F  00AC               	movwf	??_sprintf
   955  0030  082C               	movf	??_sprintf,w
   956  0031  07B4               	addwf	sprintf@sp,f
   957                           
   958                           ;D:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 559:    continue;
   959  0032  298A               	goto	l1647
   960  0033                     l1573:
   961                           
   962                           ;D:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 563:   width = 0;
   963  0033  01B5               	clrf	sprintf@width
   964  0034  01B6               	clrf	sprintf@width+1
   965                           
   966                           ;D:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 565:   flag = 0;
   967  0035  01B1               	clrf	sprintf@flag
   968  0036                     l1575:
   969                           
   970                           ;D:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 614:   if(isdigit
      +                          ((unsigned)*f)) {
   971  0036  0825               	movf	sprintf@f,w
   972  0037  0084               	movwf	4
   973  0038  120A  118A  223D  120A  118A  	fcall	stringdir
   974  003D  120A  118A  24A3  120A  118A  	fcall	_isdigit
   975  0042  1C03               	btfss	3,0
   976  0043  2845               	goto	u1091
   977  0044  2846               	goto	u1090
   978  0045                     u1091:
   979  0045  2886               	goto	l1589
   980  0046                     u1090:
   981  0046                     l1577:
   982                           
   983                           ;D:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 615:    width = 0
      +                          ;
   984  0046  1283               	bcf	3,5	;RP0=0, select bank0
   985  0047  1303               	bcf	3,6	;RP1=0, select bank0
   986  0048  01B5               	clrf	sprintf@width
   987  0049  01B6               	clrf	sprintf@width+1
   988  004A                     l1579:
   989                           
   990                           ;D:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 617:     width *=
      +                           10;
   991  004A  300A               	movlw	10
   992  004B  00F2               	movwf	___wmul@multiplier
   993  004C  3000               	movlw	0
   994  004D  00F3               	movwf	___wmul@multiplier+1
   995  004E  1283               	bcf	3,5	;RP0=0, select bank0
   996  004F  1303               	bcf	3,6	;RP1=0, select bank0
   997  0050  0836               	movf	sprintf@width+1,w
   998  0051  00F5               	movwf	___wmul@multiplicand+1
   999  0052  0835               	movf	sprintf@width,w
  1000  0053  00F4               	movwf	___wmul@multiplicand
  1001  0054  120A  118A  23FD  120A  118A  	fcall	___wmul
  1002  0059  0873               	movf	?___wmul+1,w
  1003  005A  1283               	bcf	3,5	;RP0=0, select bank0
  1004  005B  1303               	bcf	3,6	;RP1=0, select bank0
  1005  005C  00B6               	movwf	sprintf@width+1
  1006  005D  0872               	movf	?___wmul,w
  1007  005E  00B5               	movwf	sprintf@width
  1008  005F                     l1581:
  1009                           
  1010                           ;D:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 618:        width
      +                           += *f++ - '0';
  1011  005F  0825               	movf	sprintf@f,w
  1012  0060  0084               	movwf	4
  1013  0061  120A  118A  223D  120A  118A  	fcall	stringdir
  1014  0066  3ED0               	addlw	208
  1015  0067  00AC               	movwf	??_sprintf
  1016  0068  30FF               	movlw	255
  1017  0069  1803               	skipnc
  1018  006A  3000               	movlw	0
  1019  006B  00AD               	movwf	??_sprintf+1
  1020  006C  082C               	movf	??_sprintf,w
  1021  006D  07B5               	addwf	sprintf@width,f
  1022  006E  1803               	skipnc
  1023  006F  0AB6               	incf	sprintf@width+1,f
  1024  0070  082D               	movf	??_sprintf+1,w
  1025  0071  07B6               	addwf	sprintf@width+1,f
  1026  0072                     l1583:
  1027  0072  3001               	movlw	1
  1028  0073  00AC               	movwf	??_sprintf
  1029  0074  082C               	movf	??_sprintf,w
  1030  0075  07A5               	addwf	sprintf@f,f
  1031  0076                     l1585:
  1032                           
  1033                           ;D:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 619:    } while(i
      +                          sdigit((unsigned)*f));
  1034  0076  0825               	movf	sprintf@f,w
  1035  0077  0084               	movwf	4
  1036  0078  120A  118A  223D  120A  118A  	fcall	stringdir
  1037  007D  120A  118A  24A3  120A  118A  	fcall	_isdigit
  1038  0082  1803               	btfsc	3,0
  1039  0083  2885               	goto	u1101
  1040  0084  2886               	goto	u1100
  1041  0085                     u1101:
  1042  0085  284A               	goto	l1579
  1043  0086                     u1100:
  1044  0086                     l1589:
  1045  0086  3001               	movlw	1
  1046  0087  1283               	bcf	3,5	;RP0=0, select bank0
  1047  0088  1303               	bcf	3,6	;RP1=0, select bank0
  1048  0089  07A5               	addwf	sprintf@f,f
  1049  008A  30FF               	movlw	-1
  1050  008B  0725               	addwf	sprintf@f,w
  1051  008C  0084               	movwf	4
  1052  008D  120A  118A  223D  120A  118A  	fcall	stringdir
  1053  0092  00B7               	movwf	sprintf@c
  1054  0093  00AC               	movwf	??_sprintf
  1055  0094  01AD               	clrf	??_sprintf+1
  1056                           
  1057                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1058                           ; Switch size 1, requested type "simple"
  1059                           ; Number of cases is 1, Range of values is 0 to 0
  1060                           ; switch strategies available:
  1061                           ; Name         Instructions Cycles
  1062                           ; simple_byte            4     3 (average)
  1063                           ; direct_byte           11     8 (fixed)
  1064                           ; jumptable            260     6 (fixed)
  1065                           ;	Chosen strategy is simple_byte
  1066  0095  082D               	movf	??_sprintf+1,w
  1067  0096  3A00               	xorlw	0	; case 0
  1068  0097  1903               	skipnz
  1069  0098  289A               	goto	l1695
  1070  0099  298A               	goto	l1647
  1071  009A                     l1695:
  1072                           
  1073                           ; Switch size 1, requested type "simple"
  1074                           ; Number of cases is 3, Range of values is 0 to 105
  1075                           ; switch strategies available:
  1076                           ; Name         Instructions Cycles
  1077                           ; simple_byte           10     6 (average)
  1078                           ; jumptable            260     6 (fixed)
  1079                           ;	Chosen strategy is simple_byte
  1080  009A  082C               	movf	??_sprintf,w
  1081  009B  3A00               	xorlw	0	; case 0
  1082  009C  1903               	skipnz
  1083  009D  299C               	goto	l1649
  1084  009E  3A64               	xorlw	100	; case 100
  1085  009F  1903               	skipnz
  1086  00A0  28A5               	goto	l1591
  1087  00A1  3A0D               	xorlw	13	; case 105
  1088  00A2  1903               	skipnz
  1089  00A3  28A5               	goto	l1591
  1090  00A4  298A               	goto	l1647
  1091  00A5                     l1591:
  1092                           
  1093                           ;D:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1279:   {;D:\Prog
      +                          ram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1285:     val = (unsigned
      +                           int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1094  00A5  082F               	movf	sprintf@ap,w
  1095  00A6  0084               	movwf	4
  1096  00A7  1383               	bcf	3,7	;select IRP bank0
  1097  00A8  0800               	movf	0,w
  1098  00A9  00B2               	movwf	sprintf@val
  1099  00AA  0A84               	incf	4,f
  1100  00AB  0800               	movf	0,w
  1101  00AC  00B3               	movwf	sprintf@val+1
  1102  00AD                     l1593:
  1103  00AD  3002               	movlw	2
  1104  00AE  00AC               	movwf	??_sprintf
  1105  00AF  082C               	movf	??_sprintf,w
  1106  00B0  07AF               	addwf	sprintf@ap,f
  1107  00B1                     l1595:
  1108                           
  1109                           ;D:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1287:    if((int)
      +                          val < 0) {
  1110  00B1  1FB3               	btfss	sprintf@val+1,7
  1111  00B2  28B4               	goto	u1111
  1112  00B3  28B5               	goto	u1110
  1113  00B4                     u1111:
  1114  00B4  28BE               	goto	l1601
  1115  00B5                     u1110:
  1116  00B5                     l1597:
  1117                           
  1118                           ;D:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1288:     flag |=
      +                           0x03;
  1119  00B5  3003               	movlw	3
  1120  00B6  00AC               	movwf	??_sprintf
  1121  00B7  082C               	movf	??_sprintf,w
  1122  00B8  04B1               	iorwf	sprintf@flag,f
  1123  00B9                     l1599:
  1124                           
  1125                           ;D:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1289:     val = -
      +                          val;
  1126  00B9  09B2               	comf	sprintf@val,f
  1127  00BA  09B3               	comf	sprintf@val+1,f
  1128  00BB  0AB2               	incf	sprintf@val,f
  1129  00BC  1903               	skipnz
  1130  00BD  0AB3               	incf	sprintf@val+1,f
  1131  00BE                     l1601:
  1132                           
  1133                           ;D:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1292:   };D:\Prog
      +                          ram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1331:    for(c = 1 ; c !=
      +                           sizeof dpowers/sizeof dpowers[0] ; c++)
  1134  00BE  01B7               	clrf	sprintf@c
  1135  00BF  0AB7               	incf	sprintf@c,f
  1136  00C0                     l1607:
  1137                           
  1138                           ;D:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1332:     if(val 
      +                          < dpowers[c])
  1139  00C0  0837               	movf	sprintf@c,w
  1140  00C1  00AC               	movwf	??_sprintf
  1141  00C2  072C               	addwf	??_sprintf,w
  1142  00C3  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1143  00C4  0084               	movwf	4
  1144  00C5  120A  118A  223D  120A  118A  	fcall	stringdir
  1145  00CA  00AD               	movwf	??_sprintf+1
  1146  00CB  120A  118A  223D  120A  118A  	fcall	stringdir
  1147  00D0  00AE               	movwf	??_sprintf+2
  1148  00D1  082E               	movf	??_sprintf+2,w
  1149  00D2  0233               	subwf	sprintf@val+1,w
  1150  00D3  1D03               	skipz
  1151  00D4  28D7               	goto	u1125
  1152  00D5  082D               	movf	??_sprintf+1,w
  1153  00D6  0232               	subwf	sprintf@val,w
  1154  00D7                     u1125:
  1155  00D7  1803               	skipnc
  1156  00D8  28DA               	goto	u1121
  1157  00D9  28DB               	goto	u1120
  1158  00DA                     u1121:
  1159  00DA  28DC               	goto	l1611
  1160  00DB                     u1120:
  1161  00DB  28E6               	goto	l1613
  1162  00DC                     l1611:
  1163  00DC  3001               	movlw	1
  1164  00DD  00AC               	movwf	??_sprintf
  1165  00DE  082C               	movf	??_sprintf,w
  1166  00DF  07B7               	addwf	sprintf@c,f
  1167  00E0  3005               	movlw	5
  1168  00E1  0637               	xorwf	sprintf@c,w
  1169  00E2  1D03               	btfss	3,2
  1170  00E3  28E5               	goto	u1131
  1171  00E4  28E6               	goto	u1130
  1172  00E5                     u1131:
  1173  00E5  28C0               	goto	l1607
  1174  00E6                     u1130:
  1175  00E6                     l1613:
  1176                           
  1177                           ;D:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1371:   if(width 
      +                          && flag & 0x03)
  1178  00E6  0835               	movf	sprintf@width,w
  1179  00E7  0436               	iorwf	sprintf@width+1,w
  1180  00E8  1903               	btfsc	3,2
  1181  00E9  28EB               	goto	u1141
  1182  00EA  28EC               	goto	u1140
  1183  00EB                     u1141:
  1184  00EB  28F8               	goto	l275
  1185  00EC                     u1140:
  1186  00EC                     l1615:
  1187  00EC  0831               	movf	sprintf@flag,w
  1188  00ED  3903               	andlw	3
  1189  00EE  1903               	btfsc	3,2
  1190  00EF  28F1               	goto	u1151
  1191  00F0  28F2               	goto	u1150
  1192  00F1                     u1151:
  1193  00F1  28F8               	goto	l275
  1194  00F2                     u1150:
  1195  00F2                     l1617:
  1196                           
  1197                           ;D:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1372:    width--;
  1198  00F2  30FF               	movlw	255
  1199  00F3  07B5               	addwf	sprintf@width,f
  1200  00F4  1803               	skipnc
  1201  00F5  0AB6               	incf	sprintf@width+1,f
  1202  00F6  30FF               	movlw	255
  1203  00F7  07B6               	addwf	sprintf@width+1,f
  1204  00F8                     l275:
  1205                           
  1206                           ;D:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1407:   if(width 
      +                          > c)
  1207  00F8  0836               	movf	sprintf@width+1,w
  1208  00F9  3A80               	xorlw	128
  1209  00FA  3C80               	sublw	128
  1210  00FB  1D03               	skipz
  1211  00FC  28FF               	goto	u1165
  1212  00FD  0835               	movf	sprintf@width,w
  1213  00FE  0237               	subwf	sprintf@c,w
  1214  00FF                     u1165:
  1215  00FF  1803               	skipnc
  1216  0100  2902               	goto	u1161
  1217  0101  2903               	goto	u1160
  1218  0102                     u1161:
  1219  0102  290F               	goto	l1621
  1220  0103                     u1160:
  1221  0103                     l1619:
  1222                           
  1223                           ;D:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1408:    width -=
      +                           c;
  1224  0103  1283               	bcf	3,5	;RP0=0, select bank0
  1225  0104  1303               	bcf	3,6	;RP1=0, select bank0
  1226  0105  0837               	movf	sprintf@c,w
  1227  0106  00AC               	movwf	??_sprintf
  1228  0107  01AD               	clrf	??_sprintf+1
  1229  0108  082C               	movf	??_sprintf,w
  1230  0109  02B5               	subwf	sprintf@width,f
  1231  010A  082D               	movf	??_sprintf+1,w
  1232  010B  1C03               	skipc
  1233  010C  03B6               	decf	sprintf@width+1,f
  1234  010D  02B6               	subwf	sprintf@width+1,f
  1235  010E  2913               	goto	l1623
  1236  010F                     l1621:
  1237                           
  1238                           ;D:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1410:    width = 
      +                          0;
  1239  010F  1283               	bcf	3,5	;RP0=0, select bank0
  1240  0110  1303               	bcf	3,6	;RP1=0, select bank0
  1241  0111  01B5               	clrf	sprintf@width
  1242  0112  01B6               	clrf	sprintf@width+1
  1243  0113                     l1623:
  1244                           
  1245                           ;D:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1448:   {;D:\Prog
      +                          ram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1450:    if(width
  1246  0113  0835               	movf	sprintf@width,w
  1247  0114  0436               	iorwf	sprintf@width+1,w
  1248  0115  1903               	btfsc	3,2
  1249  0116  2918               	goto	u1171
  1250  0117  2919               	goto	u1170
  1251  0118                     u1171:
  1252  0118  2930               	goto	l1631
  1253  0119                     u1170:
  1254  0119                     l1625:
  1255                           
  1256                           ;D:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1456:      ((*sp+
      +                          + = (' ')));
  1257  0119  3020               	movlw	32
  1258  011A  00AC               	movwf	??_sprintf
  1259  011B  0834               	movf	sprintf@sp,w
  1260  011C  0084               	movwf	4
  1261  011D  082C               	movf	??_sprintf,w
  1262  011E  1383               	bcf	3,7	;select IRP bank0
  1263  011F  0080               	movwf	0
  1264  0120                     l1627:
  1265  0120  3001               	movlw	1
  1266  0121  00AC               	movwf	??_sprintf
  1267  0122  082C               	movf	??_sprintf,w
  1268  0123  07B4               	addwf	sprintf@sp,f
  1269  0124                     l1629:
  1270  0124  30FF               	movlw	255
  1271  0125  07B5               	addwf	sprintf@width,f
  1272  0126  1803               	skipnc
  1273  0127  0AB6               	incf	sprintf@width+1,f
  1274  0128  30FF               	movlw	255
  1275  0129  07B6               	addwf	sprintf@width+1,f
  1276  012A  0835               	movf	sprintf@width,w
  1277  012B  0436               	iorwf	sprintf@width+1,w
  1278  012C  1D03               	btfss	3,2
  1279  012D  292F               	goto	u1181
  1280  012E  2930               	goto	u1180
  1281  012F                     u1181:
  1282  012F  2919               	goto	l1625
  1283  0130                     u1180:
  1284  0130                     l1631:
  1285                           
  1286                           ;D:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1464:    if(flag 
      +                          & 0x03)
  1287  0130  0831               	movf	sprintf@flag,w
  1288  0131  3903               	andlw	3
  1289  0132  1903               	btfsc	3,2
  1290  0133  2935               	goto	u1191
  1291  0134  2936               	goto	u1190
  1292  0135                     u1191:
  1293  0135  2941               	goto	l1637
  1294  0136                     u1190:
  1295  0136                     l1633:
  1296                           
  1297                           ;D:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1465:     ((*sp++
      +                           = ('-')));
  1298  0136  302D               	movlw	45
  1299  0137  00AC               	movwf	??_sprintf
  1300  0138  0834               	movf	sprintf@sp,w
  1301  0139  0084               	movwf	4
  1302  013A  082C               	movf	??_sprintf,w
  1303  013B  1383               	bcf	3,7	;select IRP bank0
  1304  013C  0080               	movwf	0
  1305  013D                     l1635:
  1306  013D  3001               	movlw	1
  1307  013E  00AC               	movwf	??_sprintf
  1308  013F  082C               	movf	??_sprintf,w
  1309  0140  07B4               	addwf	sprintf@sp,f
  1310  0141                     l1637:
  1311                           
  1312                           ;D:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1495:   };D:\Prog
      +                          ram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1498:   prec = c;
  1313  0141  0837               	movf	sprintf@c,w
  1314  0142  00AC               	movwf	??_sprintf
  1315  0143  082C               	movf	??_sprintf,w
  1316  0144  00B0               	movwf	sprintf@prec
  1317                           
  1318                           ;D:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
  1319  0145  2981               	goto	l1645
  1320  0146                     l1639:
  1321                           
  1322                           ;D:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1504:    {;D:\Pro
      +                          gram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1515:     c = (val / dpo
      +                          wers[(unsigned char)prec]) % 10 + '0';
  1323  0146  300A               	movlw	10
  1324  0147  00A0               	movwf	___lwmod@divisor
  1325  0148  3000               	movlw	0
  1326  0149  00A1               	movwf	___lwmod@divisor+1
  1327  014A  0830               	movf	sprintf@prec,w
  1328  014B  00AC               	movwf	??_sprintf
  1329  014C  072C               	addwf	??_sprintf,w
  1330  014D  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1331  014E  0084               	movwf	4
  1332  014F  120A  118A  223D  120A  118A  	fcall	stringdir
  1333  0154  00F2               	movwf	___lwdiv@divisor
  1334  0155  120A  118A  223D  120A  118A  	fcall	stringdir
  1335  015A  00F3               	movwf	___lwdiv@divisor+1
  1336  015B  0833               	movf	sprintf@val+1,w
  1337  015C  00F5               	movwf	___lwdiv@dividend+1
  1338  015D  0832               	movf	sprintf@val,w
  1339  015E  00F4               	movwf	___lwdiv@dividend
  1340  015F  120A  118A  233F  120A  118A  	fcall	___lwdiv
  1341  0164  0873               	movf	?___lwdiv+1,w
  1342  0165  1283               	bcf	3,5	;RP0=0, select bank0
  1343  0166  1303               	bcf	3,6	;RP1=0, select bank0
  1344  0167  00A3               	movwf	___lwmod@dividend+1
  1345  0168  0872               	movf	?___lwdiv,w
  1346  0169  00A2               	movwf	___lwmod@dividend
  1347  016A  120A  118A  23C1  120A  118A  	fcall	___lwmod
  1348  016F  1283               	bcf	3,5	;RP0=0, select bank0
  1349  0170  1303               	bcf	3,6	;RP1=0, select bank0
  1350  0171  0820               	movf	?___lwmod,w
  1351  0172  3E30               	addlw	48
  1352  0173  00AD               	movwf	??_sprintf+1
  1353  0174  082D               	movf	??_sprintf+1,w
  1354  0175  00B7               	movwf	sprintf@c
  1355  0176                     l1641:
  1356                           
  1357                           ;D:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1549:    };D:\Pro
      +                          gram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1550:    ((*sp++ = (c)))
      +                          ;
  1358  0176  0837               	movf	sprintf@c,w
  1359  0177  00AC               	movwf	??_sprintf
  1360  0178  0834               	movf	sprintf@sp,w
  1361  0179  0084               	movwf	4
  1362  017A  082C               	movf	??_sprintf,w
  1363  017B  1383               	bcf	3,7	;select IRP bank0
  1364  017C  0080               	movwf	0
  1365  017D                     l1643:
  1366  017D  3001               	movlw	1
  1367  017E  00AC               	movwf	??_sprintf
  1368  017F  082C               	movf	??_sprintf,w
  1369  0180  07B4               	addwf	sprintf@sp,f
  1370  0181                     l1645:
  1371                           
  1372                           ;D:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
  1373  0181  30FF               	movlw	255
  1374  0182  00AC               	movwf	??_sprintf
  1375  0183  082C               	movf	??_sprintf,w
  1376  0184  07B0               	addwf	sprintf@prec,f
  1377  0185  0A30               	incf	sprintf@prec,w
  1378  0186  1D03               	btfss	3,2
  1379  0187  2989               	goto	u1201
  1380  0188  298A               	goto	u1200
  1381  0189                     u1201:
  1382  0189  2946               	goto	l1639
  1383  018A                     u1200:
  1384  018A                     l1647:
  1385                           
  1386                           ;D:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  1387  018A  3001               	movlw	1
  1388  018B  07A5               	addwf	sprintf@f,f
  1389  018C  30FF               	movlw	-1
  1390  018D  0725               	addwf	sprintf@f,w
  1391  018E  0084               	movwf	4
  1392  018F  120A  118A  223D  120A  118A  	fcall	stringdir
  1393  0194  00AC               	movwf	??_sprintf
  1394  0195  082C               	movf	??_sprintf,w
  1395  0196  00B7               	movwf	sprintf@c
  1396  0197  0837               	movf	sprintf@c,w
  1397  0198  1D03               	btfss	3,2
  1398  0199  299B               	goto	u1211
  1399  019A  299C               	goto	u1210
  1400  019B                     u1211:
  1401  019B  2821               	goto	l1567
  1402  019C                     u1210:
  1403  019C                     l1649:
  1404                           
  1405                           ;D:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1564:  *sp = 0;
  1406  019C  0834               	movf	sprintf@sp,w
  1407  019D  0084               	movwf	4
  1408  019E  1383               	bcf	3,7	;select IRP bank0
  1409  019F  0180               	clrf	0
  1410  01A0                     l286:
  1411  01A0  0008               	return
  1412  01A1                     __end_of_sprintf:
  1413                           
  1414                           	psect	text2
  1415  04A3                     __ptext2:	
  1416 ;; *************** function _isdigit *****************
  1417 ;; Defined at:
  1418 ;;		line 8 in file "D:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\isdigit.c"
  1419 ;; Parameters:    Size  Location     Type
  1420 ;;  c               1    wreg     unsigned char 
  1421 ;; Auto vars:     Size  Location     Type
  1422 ;;  c               1    3[COMMON] unsigned char 
  1423 ;; Return value:  Size  Location     Type
  1424 ;;		None               void
  1425 ;; Registers used:
  1426 ;;		wreg, status,2, status,0
  1427 ;; Tracked objects:
  1428 ;;		On entry : 0/0
  1429 ;;		On exit  : 0/0
  1430 ;;		Unchanged: 0/0
  1431 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1432 ;;      Params:         0       0       0       0       0
  1433 ;;      Locals:         2       0       0       0       0
  1434 ;;      Temps:          0       0       0       0       0
  1435 ;;      Totals:         2       0       0       0       0
  1436 ;;Total ram usage:        2 bytes
  1437 ;; Hardware stack levels used:    1
  1438 ;; Hardware stack levels required when called:    1
  1439 ;; This function calls:
  1440 ;;		Nothing
  1441 ;; This function is called by:
  1442 ;;		_sprintf
  1443 ;; This function uses a non-reentrant model
  1444 ;;
  1445                           
  1446                           
  1447                           ;psect for function _isdigit
  1448  04A3                     _isdigit:
  1449                           
  1450                           ;incstack = 0
  1451                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  1452                           ;isdigit@c stored from wreg
  1453  04A3  00F3               	movwf	isdigit@c
  1454  04A4                     l1217:
  1455  04A4  01F2               	clrf	_isdigit$748
  1456  04A5                     l1219:
  1457  04A5  303A               	movlw	58
  1458  04A6  0273               	subwf	isdigit@c,w
  1459  04A7  1803               	skipnc
  1460  04A8  2CAA               	goto	u611
  1461  04A9  2CAB               	goto	u610
  1462  04AA                     u611:
  1463  04AA  2CB3               	goto	l1225
  1464  04AB                     u610:
  1465  04AB                     l1221:
  1466  04AB  3030               	movlw	48
  1467  04AC  0273               	subwf	isdigit@c,w
  1468  04AD  1C03               	skipc
  1469  04AE  2CB0               	goto	u621
  1470  04AF  2CB1               	goto	u620
  1471  04B0                     u621:
  1472  04B0  2CB3               	goto	l1225
  1473  04B1                     u620:
  1474  04B1                     l1223:
  1475  04B1  01F2               	clrf	_isdigit$748
  1476  04B2  0AF2               	incf	_isdigit$748,f
  1477  04B3                     l1225:
  1478  04B3  0C72               	rrf	_isdigit$748,w
  1479  04B4                     l743:
  1480  04B4  0008               	return
  1481  04B5                     __end_of_isdigit:
  1482                           
  1483                           	psect	text3
  1484  03FD                     __ptext3:	
  1485 ;; *************** function ___wmul *****************
  1486 ;; Defined at:
  1487 ;;		line 15 in file "D:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\Umul16.c"
  1488 ;; Parameters:    Size  Location     Type
  1489 ;;  multiplier      2    2[COMMON] unsigned int 
  1490 ;;  multiplicand    2    4[COMMON] unsigned int 
  1491 ;; Auto vars:     Size  Location     Type
  1492 ;;  product         2    6[COMMON] unsigned int 
  1493 ;; Return value:  Size  Location     Type
  1494 ;;                  2    2[COMMON] unsigned int 
  1495 ;; Registers used:
  1496 ;;		wreg, status,2, status,0
  1497 ;; Tracked objects:
  1498 ;;		On entry : 0/0
  1499 ;;		On exit  : 0/0
  1500 ;;		Unchanged: 0/0
  1501 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1502 ;;      Params:         4       0       0       0       0
  1503 ;;      Locals:         2       0       0       0       0
  1504 ;;      Temps:          0       0       0       0       0
  1505 ;;      Totals:         6       0       0       0       0
  1506 ;;Total ram usage:        6 bytes
  1507 ;; Hardware stack levels used:    1
  1508 ;; Hardware stack levels required when called:    1
  1509 ;; This function calls:
  1510 ;;		Nothing
  1511 ;; This function is called by:
  1512 ;;		_sprintf
  1513 ;; This function uses a non-reentrant model
  1514 ;;
  1515                           
  1516                           
  1517                           ;psect for function ___wmul
  1518  03FD                     ___wmul:
  1519  03FD                     l1229:	
  1520                           ;incstack = 0
  1521                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  1522                           
  1523  03FD  01F6               	clrf	___wmul@product
  1524  03FE  01F7               	clrf	___wmul@product+1
  1525  03FF                     l1231:
  1526  03FF  1C72               	btfss	___wmul@multiplier,0
  1527  0400  2C02               	goto	u631
  1528  0401  2C03               	goto	u630
  1529  0402                     u631:
  1530  0402  2C09               	goto	l290
  1531  0403                     u630:
  1532  0403                     l1233:
  1533  0403  0874               	movf	___wmul@multiplicand,w
  1534  0404  07F6               	addwf	___wmul@product,f
  1535  0405  1803               	skipnc
  1536  0406  0AF7               	incf	___wmul@product+1,f
  1537  0407  0875               	movf	___wmul@multiplicand+1,w
  1538  0408  07F7               	addwf	___wmul@product+1,f
  1539  0409                     l290:
  1540  0409  3001               	movlw	1
  1541  040A                     u645:
  1542  040A  1003               	clrc
  1543  040B  0DF4               	rlf	___wmul@multiplicand,f
  1544  040C  0DF5               	rlf	___wmul@multiplicand+1,f
  1545  040D  3EFF               	addlw	-1
  1546  040E  1D03               	skipz
  1547  040F  2C0A               	goto	u645
  1548  0410                     l1235:
  1549  0410  3001               	movlw	1
  1550  0411                     u655:
  1551  0411  1003               	clrc
  1552  0412  0CF3               	rrf	___wmul@multiplier+1,f
  1553  0413  0CF2               	rrf	___wmul@multiplier,f
  1554  0414  3EFF               	addlw	-1
  1555  0415  1D03               	skipz
  1556  0416  2C11               	goto	u655
  1557  0417                     l1237:
  1558  0417  0872               	movf	___wmul@multiplier,w
  1559  0418  0473               	iorwf	___wmul@multiplier+1,w
  1560  0419  1D03               	btfss	3,2
  1561  041A  2C1C               	goto	u661
  1562  041B  2C1D               	goto	u660
  1563  041C                     u661:
  1564  041C  2BFF               	goto	l1231
  1565  041D                     u660:
  1566  041D                     l1239:
  1567  041D  0877               	movf	___wmul@product+1,w
  1568  041E  00F3               	movwf	?___wmul+1
  1569  041F  0876               	movf	___wmul@product,w
  1570  0420  00F2               	movwf	?___wmul
  1571  0421                     l292:
  1572  0421  0008               	return
  1573  0422                     __end_of___wmul:
  1574                           
  1575                           	psect	text4
  1576  03C1                     __ptext4:	
  1577 ;; *************** function ___lwmod *****************
  1578 ;; Defined at:
  1579 ;;		line 5 in file "D:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\lwmod.c"
  1580 ;; Parameters:    Size  Location     Type
  1581 ;;  divisor         2    0[BANK0 ] unsigned int 
  1582 ;;  dividend        2    2[BANK0 ] unsigned int 
  1583 ;; Auto vars:     Size  Location     Type
  1584 ;;  counter         1    4[BANK0 ] unsigned char 
  1585 ;; Return value:  Size  Location     Type
  1586 ;;                  2    0[BANK0 ] unsigned int 
  1587 ;; Registers used:
  1588 ;;		wreg, status,2, status,0
  1589 ;; Tracked objects:
  1590 ;;		On entry : 0/0
  1591 ;;		On exit  : 0/0
  1592 ;;		Unchanged: 0/0
  1593 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1594 ;;      Params:         0       4       0       0       0
  1595 ;;      Locals:         0       1       0       0       0
  1596 ;;      Temps:          1       0       0       0       0
  1597 ;;      Totals:         1       5       0       0       0
  1598 ;;Total ram usage:        6 bytes
  1599 ;; Hardware stack levels used:    1
  1600 ;; Hardware stack levels required when called:    1
  1601 ;; This function calls:
  1602 ;;		Nothing
  1603 ;; This function is called by:
  1604 ;;		_sprintf
  1605 ;; This function uses a non-reentrant model
  1606 ;;
  1607                           
  1608                           
  1609                           ;psect for function ___lwmod
  1610  03C1                     ___lwmod:
  1611  03C1                     l1543:	
  1612                           ;incstack = 0
  1613                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  1614                           
  1615  03C1  1283               	bcf	3,5	;RP0=0, select bank0
  1616  03C2  1303               	bcf	3,6	;RP1=0, select bank0
  1617  03C3  0820               	movf	___lwmod@divisor,w
  1618  03C4  0421               	iorwf	___lwmod@divisor+1,w
  1619  03C5  1903               	btfsc	3,2
  1620  03C6  2BC8               	goto	u1021
  1621  03C7  2BC9               	goto	u1020
  1622  03C8                     u1021:
  1623  03C8  2BF8               	goto	l1561
  1624  03C9                     u1020:
  1625  03C9                     l1545:
  1626  03C9  01A4               	clrf	___lwmod@counter
  1627  03CA  0AA4               	incf	___lwmod@counter,f
  1628  03CB  2BD7               	goto	l1551
  1629  03CC                     l1547:
  1630  03CC  3001               	movlw	1
  1631  03CD                     u1035:
  1632  03CD  1003               	clrc
  1633  03CE  0DA0               	rlf	___lwmod@divisor,f
  1634  03CF  0DA1               	rlf	___lwmod@divisor+1,f
  1635  03D0  3EFF               	addlw	-1
  1636  03D1  1D03               	skipz
  1637  03D2  2BCD               	goto	u1035
  1638  03D3                     l1549:
  1639  03D3  3001               	movlw	1
  1640  03D4  00FA               	movwf	??___lwmod
  1641  03D5  087A               	movf	??___lwmod,w
  1642  03D6  07A4               	addwf	___lwmod@counter,f
  1643  03D7                     l1551:
  1644  03D7  1FA1               	btfss	___lwmod@divisor+1,7
  1645  03D8  2BDA               	goto	u1041
  1646  03D9  2BDB               	goto	u1040
  1647  03DA                     u1041:
  1648  03DA  2BCC               	goto	l1547
  1649  03DB                     u1040:
  1650  03DB                     l1553:
  1651  03DB  0821               	movf	___lwmod@divisor+1,w
  1652  03DC  0223               	subwf	___lwmod@dividend+1,w
  1653  03DD  1D03               	skipz
  1654  03DE  2BE1               	goto	u1055
  1655  03DF  0820               	movf	___lwmod@divisor,w
  1656  03E0  0222               	subwf	___lwmod@dividend,w
  1657  03E1                     u1055:
  1658  03E1  1C03               	skipc
  1659  03E2  2BE4               	goto	u1051
  1660  03E3  2BE5               	goto	u1050
  1661  03E4                     u1051:
  1662  03E4  2BEB               	goto	l1557
  1663  03E5                     u1050:
  1664  03E5                     l1555:
  1665  03E5  0820               	movf	___lwmod@divisor,w
  1666  03E6  02A2               	subwf	___lwmod@dividend,f
  1667  03E7  0821               	movf	___lwmod@divisor+1,w
  1668  03E8  1C03               	skipc
  1669  03E9  03A3               	decf	___lwmod@dividend+1,f
  1670  03EA  02A3               	subwf	___lwmod@dividend+1,f
  1671  03EB                     l1557:
  1672  03EB  3001               	movlw	1
  1673  03EC                     u1065:
  1674  03EC  1003               	clrc
  1675  03ED  0CA1               	rrf	___lwmod@divisor+1,f
  1676  03EE  0CA0               	rrf	___lwmod@divisor,f
  1677  03EF  3EFF               	addlw	-1
  1678  03F0  1D03               	skipz
  1679  03F1  2BEC               	goto	u1065
  1680  03F2                     l1559:
  1681  03F2  3001               	movlw	1
  1682  03F3  02A4               	subwf	___lwmod@counter,f
  1683  03F4  1D03               	btfss	3,2
  1684  03F5  2BF7               	goto	u1071
  1685  03F6  2BF8               	goto	u1070
  1686  03F7                     u1071:
  1687  03F7  2BDB               	goto	l1553
  1688  03F8                     u1070:
  1689  03F8                     l1561:
  1690  03F8  0823               	movf	___lwmod@dividend+1,w
  1691  03F9  00A1               	movwf	?___lwmod+1
  1692  03FA  0822               	movf	___lwmod@dividend,w
  1693  03FB  00A0               	movwf	?___lwmod
  1694  03FC                     l572:
  1695  03FC  0008               	return
  1696  03FD                     __end_of___lwmod:
  1697                           
  1698                           	psect	text5
  1699  033F                     __ptext5:	
  1700 ;; *************** function ___lwdiv *****************
  1701 ;; Defined at:
  1702 ;;		line 5 in file "D:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\lwdiv.c"
  1703 ;; Parameters:    Size  Location     Type
  1704 ;;  divisor         2    2[COMMON] unsigned int 
  1705 ;;  dividend        2    4[COMMON] unsigned int 
  1706 ;; Auto vars:     Size  Location     Type
  1707 ;;  quotient        2    7[COMMON] unsigned int 
  1708 ;;  counter         1    9[COMMON] unsigned char 
  1709 ;; Return value:  Size  Location     Type
  1710 ;;                  2    2[COMMON] unsigned int 
  1711 ;; Registers used:
  1712 ;;		wreg, status,2, status,0
  1713 ;; Tracked objects:
  1714 ;;		On entry : 0/0
  1715 ;;		On exit  : 0/0
  1716 ;;		Unchanged: 0/0
  1717 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1718 ;;      Params:         4       0       0       0       0
  1719 ;;      Locals:         3       0       0       0       0
  1720 ;;      Temps:          1       0       0       0       0
  1721 ;;      Totals:         8       0       0       0       0
  1722 ;;Total ram usage:        8 bytes
  1723 ;; Hardware stack levels used:    1
  1724 ;; Hardware stack levels required when called:    1
  1725 ;; This function calls:
  1726 ;;		Nothing
  1727 ;; This function is called by:
  1728 ;;		_sprintf
  1729 ;; This function uses a non-reentrant model
  1730 ;;
  1731                           
  1732                           
  1733                           ;psect for function ___lwdiv
  1734  033F                     ___lwdiv:
  1735  033F                     l1243:	
  1736                           ;incstack = 0
  1737                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  1738                           
  1739  033F  01F7               	clrf	___lwdiv@quotient
  1740  0340  01F8               	clrf	___lwdiv@quotient+1
  1741  0341                     l1245:
  1742  0341  0872               	movf	___lwdiv@divisor,w
  1743  0342  0473               	iorwf	___lwdiv@divisor+1,w
  1744  0343  1903               	btfsc	3,2
  1745  0344  2B46               	goto	u671
  1746  0345  2B47               	goto	u670
  1747  0346                     u671:
  1748  0346  2B7E               	goto	l1265
  1749  0347                     u670:
  1750  0347                     l1247:
  1751  0347  01F9               	clrf	___lwdiv@counter
  1752  0348  0AF9               	incf	___lwdiv@counter,f
  1753  0349  2B55               	goto	l1253
  1754  034A                     l1249:
  1755  034A  3001               	movlw	1
  1756  034B                     u685:
  1757  034B  1003               	clrc
  1758  034C  0DF2               	rlf	___lwdiv@divisor,f
  1759  034D  0DF3               	rlf	___lwdiv@divisor+1,f
  1760  034E  3EFF               	addlw	-1
  1761  034F  1D03               	skipz
  1762  0350  2B4B               	goto	u685
  1763  0351                     l1251:
  1764  0351  3001               	movlw	1
  1765  0352  00F6               	movwf	??___lwdiv
  1766  0353  0876               	movf	??___lwdiv,w
  1767  0354  07F9               	addwf	___lwdiv@counter,f
  1768  0355                     l1253:
  1769  0355  1FF3               	btfss	___lwdiv@divisor+1,7
  1770  0356  2B58               	goto	u691
  1771  0357  2B59               	goto	u690
  1772  0358                     u691:
  1773  0358  2B4A               	goto	l1249
  1774  0359                     u690:
  1775  0359                     l1255:
  1776  0359  3001               	movlw	1
  1777  035A                     u705:
  1778  035A  1003               	clrc
  1779  035B  0DF7               	rlf	___lwdiv@quotient,f
  1780  035C  0DF8               	rlf	___lwdiv@quotient+1,f
  1781  035D  3EFF               	addlw	-1
  1782  035E  1D03               	skipz
  1783  035F  2B5A               	goto	u705
  1784  0360  0873               	movf	___lwdiv@divisor+1,w
  1785  0361  0275               	subwf	___lwdiv@dividend+1,w
  1786  0362  1D03               	skipz
  1787  0363  2B66               	goto	u715
  1788  0364  0872               	movf	___lwdiv@divisor,w
  1789  0365  0274               	subwf	___lwdiv@dividend,w
  1790  0366                     u715:
  1791  0366  1C03               	skipc
  1792  0367  2B69               	goto	u711
  1793  0368  2B6A               	goto	u710
  1794  0369                     u711:
  1795  0369  2B71               	goto	l1261
  1796  036A                     u710:
  1797  036A                     l1257:
  1798  036A  0872               	movf	___lwdiv@divisor,w
  1799  036B  02F4               	subwf	___lwdiv@dividend,f
  1800  036C  0873               	movf	___lwdiv@divisor+1,w
  1801  036D  1C03               	skipc
  1802  036E  03F5               	decf	___lwdiv@dividend+1,f
  1803  036F  02F5               	subwf	___lwdiv@dividend+1,f
  1804  0370                     l1259:
  1805  0370  1477               	bsf	___lwdiv@quotient,0
  1806  0371                     l1261:
  1807  0371  3001               	movlw	1
  1808  0372                     u725:
  1809  0372  1003               	clrc
  1810  0373  0CF3               	rrf	___lwdiv@divisor+1,f
  1811  0374  0CF2               	rrf	___lwdiv@divisor,f
  1812  0375  3EFF               	addlw	-1
  1813  0376  1D03               	skipz
  1814  0377  2B72               	goto	u725
  1815  0378                     l1263:
  1816  0378  3001               	movlw	1
  1817  0379  02F9               	subwf	___lwdiv@counter,f
  1818  037A  1D03               	btfss	3,2
  1819  037B  2B7D               	goto	u731
  1820  037C  2B7E               	goto	u730
  1821  037D                     u731:
  1822  037D  2B59               	goto	l1255
  1823  037E                     u730:
  1824  037E                     l1265:
  1825  037E  0878               	movf	___lwdiv@quotient+1,w
  1826  037F  00F3               	movwf	?___lwdiv+1
  1827  0380  0877               	movf	___lwdiv@quotient,w
  1828  0381  00F2               	movwf	?___lwdiv
  1829  0382                     l562:
  1830  0382  0008               	return
  1831  0383                     __end_of___lwdiv:
  1832                           
  1833                           	psect	text6
  1834  04D3                     __ptext6:	
  1835 ;; *************** function _spiWrite *****************
  1836 ;; Defined at:
  1837 ;;		line 71 in file "./spi.h"
  1838 ;; Parameters:    Size  Location     Type
  1839 ;;  dat             1    wreg     unsigned char 
  1840 ;; Auto vars:     Size  Location     Type
  1841 ;;  dat             1    2[COMMON] unsigned char 
  1842 ;; Return value:  Size  Location     Type
  1843 ;;                  1    wreg      void 
  1844 ;; Registers used:
  1845 ;;		wreg
  1846 ;; Tracked objects:
  1847 ;;		On entry : 0/0
  1848 ;;		On exit  : 0/0
  1849 ;;		Unchanged: 0/0
  1850 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1851 ;;      Params:         0       0       0       0       0
  1852 ;;      Locals:         1       0       0       0       0
  1853 ;;      Temps:          0       0       0       0       0
  1854 ;;      Totals:         1       0       0       0       0
  1855 ;;Total ram usage:        1 bytes
  1856 ;; Hardware stack levels used:    1
  1857 ;; Hardware stack levels required when called:    1
  1858 ;; This function calls:
  1859 ;;		Nothing
  1860 ;; This function is called by:
  1861 ;;		_main
  1862 ;; This function uses a non-reentrant model
  1863 ;;
  1864                           
  1865                           
  1866                           ;psect for function _spiWrite
  1867  04D3                     _spiWrite:
  1868                           
  1869                           ;incstack = 0
  1870                           ; Regs used in _spiWrite: [wreg]
  1871                           ;spiWrite@dat stored from wreg
  1872  04D3  00F2               	movwf	spiWrite@dat
  1873  04D4                     l1301:
  1874                           
  1875                           ;./spi.h: 71: void spiWrite(char dat);./spi.h: 72: {;./spi.h: 73:     SSPBUF = dat;
  1876  04D4  0872               	movf	spiWrite@dat,w
  1877  04D5  1283               	bcf	3,5	;RP0=0, select bank0
  1878  04D6  1303               	bcf	3,6	;RP1=0, select bank0
  1879  04D7  0093               	movwf	19	;volatile
  1880  04D8                     l76:
  1881  04D8  0008               	return
  1882  04D9                     __end_of_spiWrite:
  1883                           
  1884                           	psect	text7
  1885  04C3                     __ptext7:	
  1886 ;; *************** function _spiRead *****************
  1887 ;; Defined at:
  1888 ;;		line 84 in file "./spi.h"
  1889 ;; Parameters:    Size  Location     Type
  1890 ;;		None
  1891 ;; Auto vars:     Size  Location     Type
  1892 ;;		None
  1893 ;; Return value:  Size  Location     Type
  1894 ;;                  1    wreg      unsigned char 
  1895 ;; Registers used:
  1896 ;;		wreg, status,2, status,0, pclath, cstack
  1897 ;; Tracked objects:
  1898 ;;		On entry : 0/0
  1899 ;;		On exit  : 0/0
  1900 ;;		Unchanged: 0/0
  1901 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1902 ;;      Params:         0       0       0       0       0
  1903 ;;      Locals:         0       0       0       0       0
  1904 ;;      Temps:          0       0       0       0       0
  1905 ;;      Totals:         0       0       0       0       0
  1906 ;;Total ram usage:        0 bytes
  1907 ;; Hardware stack levels used:    1
  1908 ;; Hardware stack levels required when called:    2
  1909 ;; This function calls:
  1910 ;;		_spiReceiveWait
  1911 ;; This function is called by:
  1912 ;;		_main
  1913 ;; This function uses a non-reentrant model
  1914 ;;
  1915                           
  1916                           
  1917                           ;psect for function _spiRead
  1918  04C3                     _spiRead:
  1919  04C3                     l1303:	
  1920                           ;incstack = 0
  1921                           ; Regs used in _spiRead: [wreg+status,2+status,0+pclath+cstack]
  1922                           
  1923                           
  1924                           ;./spi.h: 86:     spiReceiveWait();
  1925  04C3  120A  118A  24CC  120A  118A  	fcall	_spiReceiveWait
  1926  04C8                     l1305:
  1927                           
  1928                           ;./spi.h: 87:     return(SSPBUF);
  1929  04C8  1283               	bcf	3,5	;RP0=0, select bank0
  1930  04C9  1303               	bcf	3,6	;RP1=0, select bank0
  1931  04CA  0813               	movf	19,w	;volatile
  1932  04CB                     l84:
  1933  04CB  0008               	return
  1934  04CC                     __end_of_spiRead:
  1935                           
  1936                           	psect	text8
  1937  04CC                     __ptext8:	
  1938 ;; *************** function _spiReceiveWait *****************
  1939 ;; Defined at:
  1940 ;;		line 66 in file "./spi.h"
  1941 ;; Parameters:    Size  Location     Type
  1942 ;;		None
  1943 ;; Auto vars:     Size  Location     Type
  1944 ;;		None
  1945 ;; Return value:  Size  Location     Type
  1946 ;;                  1    wreg      void 
  1947 ;; Registers used:
  1948 ;;		None
  1949 ;; Tracked objects:
  1950 ;;		On entry : 0/0
  1951 ;;		On exit  : 0/0
  1952 ;;		Unchanged: 0/0
  1953 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1954 ;;      Params:         0       0       0       0       0
  1955 ;;      Locals:         0       0       0       0       0
  1956 ;;      Temps:          0       0       0       0       0
  1957 ;;      Totals:         0       0       0       0       0
  1958 ;;Total ram usage:        0 bytes
  1959 ;; Hardware stack levels used:    1
  1960 ;; Hardware stack levels required when called:    1
  1961 ;; This function calls:
  1962 ;;		Nothing
  1963 ;; This function is called by:
  1964 ;;		_spiRead
  1965 ;; This function uses a non-reentrant model
  1966 ;;
  1967                           
  1968                           
  1969                           ;psect for function _spiReceiveWait
  1970  04CC                     _spiReceiveWait:
  1971  04CC                     l1195:	
  1972                           ;incstack = 0
  1973                           ; Regs used in _spiReceiveWait: []
  1974                           
  1975  04CC                     l70:	
  1976                           ;./spi.h: 68:     while ( !SSPSTATbits.BF );
  1977                           
  1978  04CC  1683               	bsf	3,5	;RP0=1, select bank1
  1979  04CD  1303               	bcf	3,6	;RP1=0, select bank1
  1980  04CE  1C14               	btfss	20,0	;volatile
  1981  04CF  2CD1               	goto	u601
  1982  04D0  2CD2               	goto	u600
  1983  04D1                     u601:
  1984  04D1  2CCC               	goto	l70
  1985  04D2                     u600:
  1986  04D2                     l73:
  1987  04D2  0008               	return
  1988  04D3                     __end_of_spiReceiveWait:
  1989                           
  1990                           	psect	text9
  1991  047A                     __ptext9:	
  1992 ;; *************** function _spiInit *****************
  1993 ;; Defined at:
  1994 ;;		line 49 in file "./spi.h"
  1995 ;; Parameters:    Size  Location     Type
  1996 ;;  sType           1    wreg     enum E1349
  1997 ;;  sDataSample     1    2[COMMON] enum E1357
  1998 ;;  sClockIdle      1    3[COMMON] enum E1361
  1999 ;;  sTransmitEdg    1    4[COMMON] enum E1365
  2000 ;; Auto vars:     Size  Location     Type
  2001 ;;  sType           1    5[COMMON] enum E1349
  2002 ;; Return value:  Size  Location     Type
  2003 ;;                  1    wreg      void 
  2004 ;; Registers used:
  2005 ;;		wreg, status,2, status,0
  2006 ;; Tracked objects:
  2007 ;;		On entry : 0/0
  2008 ;;		On exit  : 0/0
  2009 ;;		Unchanged: 0/0
  2010 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2011 ;;      Params:         3       0       0       0       0
  2012 ;;      Locals:         1       0       0       0       0
  2013 ;;      Temps:          0       0       0       0       0
  2014 ;;      Totals:         4       0       0       0       0
  2015 ;;Total ram usage:        4 bytes
  2016 ;; Hardware stack levels used:    1
  2017 ;; Hardware stack levels required when called:    1
  2018 ;; This function calls:
  2019 ;;		Nothing
  2020 ;; This function is called by:
  2021 ;;		_main
  2022 ;; This function uses a non-reentrant model
  2023 ;;
  2024                           
  2025                           
  2026                           ;psect for function _spiInit
  2027  047A                     _spiInit:
  2028                           
  2029                           ;incstack = 0
  2030                           ; Regs used in _spiInit: [wreg+status,2+status,0]
  2031                           ;spiInit@sType stored from wreg
  2032  047A  00F5               	movwf	spiInit@sType
  2033  047B                     l1291:
  2034                           
  2035                           ;./spi.h: 49: void spiInit(Spi_Type sType, Spi_Data_Sample sDataSample, Spi_Clock_Idle s
      +                          ClockIdle, Spi_Transmit_Edge sTransmitEdge);./spi.h: 50: {;./spi.h: 51:     TRISC5 = 0;
  2036  047B  1683               	bsf	3,5	;RP0=1, select bank1
  2037  047C  1303               	bcf	3,6	;RP1=0, select bank1
  2038  047D  1287               	bcf	7,5	;volatile
  2039                           
  2040                           ;./spi.h: 52:     if(sType & 0b00000100)
  2041  047E  1D75               	btfss	spiInit@sType,2
  2042  047F  2C81               	goto	u801
  2043  0480  2C82               	goto	u800
  2044  0481                     u801:
  2045  0481  2C86               	goto	l1297
  2046  0482                     u800:
  2047  0482                     l1293:
  2048                           
  2049                           ;./spi.h: 53:     {;./spi.h: 54:         SSPSTAT = sTransmitEdge;
  2050  0482  0874               	movf	spiInit@sTransmitEdge,w
  2051  0483  0094               	movwf	20	;volatile
  2052  0484                     l1295:
  2053                           
  2054                           ;./spi.h: 55:         TRISC3 = 1;
  2055  0484  1587               	bsf	7,3	;volatile
  2056                           
  2057                           ;./spi.h: 56:     }
  2058  0485  2C8A               	goto	l66
  2059  0486                     l1297:
  2060                           
  2061                           ;./spi.h: 58:     {;./spi.h: 59:         SSPSTAT = sDataSample | sTransmitEdge;
  2062  0486  0872               	movf	spiInit@sDataSample,w
  2063  0487  0474               	iorwf	spiInit@sTransmitEdge,w
  2064  0488  0094               	movwf	20	;volatile
  2065  0489                     l1299:
  2066                           
  2067                           ;./spi.h: 60:         TRISC3 = 0;
  2068  0489  1187               	bcf	7,3	;volatile
  2069  048A                     l66:	
  2070                           ;./spi.h: 61:     }
  2071                           
  2072                           
  2073                           ;./spi.h: 63:     SSPCON = sType | sClockIdle;
  2074  048A  0875               	movf	spiInit@sType,w
  2075  048B  0473               	iorwf	spiInit@sClockIdle,w
  2076  048C  1283               	bcf	3,5	;RP0=0, select bank0
  2077  048D  1303               	bcf	3,6	;RP1=0, select bank0
  2078  048E  0094               	movwf	20	;volatile
  2079  048F                     l67:
  2080  048F  0008               	return
  2081  0490                     __end_of_spiInit:
  2082                           
  2083                           	psect	text10
  2084  0490                     __ptext10:	
  2085 ;; *************** function _setup *****************
  2086 ;; Defined at:
  2087 ;;		line 85 in file "Master.c"
  2088 ;; Parameters:    Size  Location     Type
  2089 ;;		None
  2090 ;; Auto vars:     Size  Location     Type
  2091 ;;		None
  2092 ;; Return value:  Size  Location     Type
  2093 ;;                  1    wreg      void 
  2094 ;; Registers used:
  2095 ;;		wreg, status,2
  2096 ;; Tracked objects:
  2097 ;;		On entry : 0/0
  2098 ;;		On exit  : 0/0
  2099 ;;		Unchanged: 0/0
  2100 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2101 ;;      Params:         0       0       0       0       0
  2102 ;;      Locals:         0       0       0       0       0
  2103 ;;      Temps:          0       0       0       0       0
  2104 ;;      Totals:         0       0       0       0       0
  2105 ;;Total ram usage:        0 bytes
  2106 ;; Hardware stack levels used:    1
  2107 ;; Hardware stack levels required when called:    1
  2108 ;; This function calls:
  2109 ;;		Nothing
  2110 ;; This function is called by:
  2111 ;;		_main
  2112 ;; This function uses a non-reentrant model
  2113 ;;
  2114                           
  2115                           
  2116                           ;psect for function _setup
  2117  0490                     _setup:
  2118  0490                     l1345:	
  2119                           ;incstack = 0
  2120                           ; Regs used in _setup: [wreg+status,2]
  2121                           
  2122                           
  2123                           ;Master.c: 86:     TRISA = 0b00000000;
  2124  0490  1683               	bsf	3,5	;RP0=1, select bank1
  2125  0491  1303               	bcf	3,6	;RP1=0, select bank1
  2126  0492  0185               	clrf	5	;volatile
  2127                           
  2128                           ;Master.c: 87:     TRISB = 0b00000000;
  2129  0493  0186               	clrf	6	;volatile
  2130                           
  2131                           ;Master.c: 88:     TRISD = 0b00000000;
  2132  0494  0188               	clrf	8	;volatile
  2133                           
  2134                           ;Master.c: 89:     TRISE = 0b00000000;
  2135  0495  0189               	clrf	9	;volatile
  2136                           
  2137                           ;Master.c: 90:     ANSEL = 0b00000000;
  2138  0496  1683               	bsf	3,5	;RP0=1, select bank3
  2139  0497  1703               	bsf	3,6	;RP1=1, select bank3
  2140  0498  0188               	clrf	8	;volatile
  2141                           
  2142                           ;Master.c: 91:     ANSELH = 0b00000000;
  2143  0499  0189               	clrf	9	;volatile
  2144  049A                     l1347:
  2145                           
  2146                           ;Master.c: 92:     INTCON = 0b11000000;
  2147  049A  30C0               	movlw	192
  2148  049B  008B               	movwf	11	;volatile
  2149  049C                     l1349:
  2150                           
  2151                           ;Master.c: 93:     PORTA = 0;
  2152  049C  1283               	bcf	3,5	;RP0=0, select bank0
  2153  049D  1303               	bcf	3,6	;RP1=0, select bank0
  2154  049E  0185               	clrf	5	;volatile
  2155                           
  2156                           ;Master.c: 94:     PORTB = 0x0F;
  2157  049F  300F               	movlw	15
  2158  04A0  0086               	movwf	6	;volatile
  2159  04A1                     l1351:
  2160                           
  2161                           ;Master.c: 95:     PORTD = 0;
  2162  04A1  0188               	clrf	8	;volatile
  2163  04A2                     l159:
  2164  04A2  0008               	return
  2165  04A3                     __end_of_setup:
  2166                           
  2167                           	psect	text11
  2168  02B4                     __ptext11:	
  2169 ;; *************** function _Lcd_Write_String *****************
  2170 ;; Defined at:
  2171 ;;		line 92 in file "./lcdlib.h"
  2172 ;; Parameters:    Size  Location     Type
  2173 ;;  a               2    6[COMMON] PTR unsigned char 
  2174 ;;		 -> main@s(16), STR_6(15), STR_5(20), STR_4(12), 
  2175 ;;		 -> STR_3(13), STR_2(10), STR_1(16), 
  2176 ;; Auto vars:     Size  Location     Type
  2177 ;;  i               2    0[BANK0 ] int 
  2178 ;; Return value:  Size  Location     Type
  2179 ;;                  1    wreg      void 
  2180 ;; Registers used:
  2181 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2182 ;; Tracked objects:
  2183 ;;		On entry : 0/0
  2184 ;;		On exit  : 0/0
  2185 ;;		Unchanged: 0/0
  2186 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2187 ;;      Params:         2       0       0       0       0
  2188 ;;      Locals:         0       2       0       0       0
  2189 ;;      Temps:          3       0       0       0       0
  2190 ;;      Totals:         5       2       0       0       0
  2191 ;;Total ram usage:        7 bytes
  2192 ;; Hardware stack levels used:    1
  2193 ;; Hardware stack levels required when called:    3
  2194 ;; This function calls:
  2195 ;;		_Lcd_Write_Char
  2196 ;; This function is called by:
  2197 ;;		_main
  2198 ;;		_ARRANQUE
  2199 ;; This function uses a non-reentrant model
  2200 ;;
  2201                           
  2202                           
  2203                           ;psect for function _Lcd_Write_String
  2204  02B4                     _Lcd_Write_String:
  2205  02B4                     l1333:	
  2206                           ;incstack = 0
  2207                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2208                           
  2209                           
  2210                           ;./lcdlib.h: 93:     int i;;./lcdlib.h: 94:     for (i = 0; a[i] != '\0'; i++)
  2211  02B4  1283               	bcf	3,5	;RP0=0, select bank0
  2212  02B5  1303               	bcf	3,6	;RP1=0, select bank0
  2213  02B6  01A0               	clrf	Lcd_Write_String@i
  2214  02B7  01A1               	clrf	Lcd_Write_String@i+1
  2215  02B8  2ADD               	goto	l1339
  2216  02B9                     l1335:
  2217                           
  2218                           ;./lcdlib.h: 95:         Lcd_Write_Char(a[i]);
  2219  02B9  0820               	movf	Lcd_Write_String@i,w
  2220  02BA  0776               	addwf	Lcd_Write_String@a,w
  2221  02BB  00F9               	movwf	??_Lcd_Write_String+1
  2222  02BC  0877               	movf	Lcd_Write_String@a+1,w
  2223  02BD  00F8               	movwf	??_Lcd_Write_String
  2224  02BE  1803               	skipnc
  2225  02BF  0AF8               	incf	??_Lcd_Write_String,f
  2226  02C0  1FA0               	btfss	Lcd_Write_String@i,7
  2227  02C1  2AC3               	goto	u830
  2228  02C2  03F8               	decf	??_Lcd_Write_String,f
  2229  02C3                     u830:
  2230  02C3  0878               	movf	??_Lcd_Write_String,w
  2231  02C4  00FA               	movwf	??_Lcd_Write_String+2
  2232  02C5  087A               	movf	??_Lcd_Write_String+2,w
  2233  02C6  1283               	bcf	3,5	;RP0=0, select bank0
  2234  02C7  1303               	bcf	3,6	;RP1=0, select bank0
  2235  02C8  00FF               	movwf	btemp+1
  2236  02C9  0879               	movf	??_Lcd_Write_String+1,w
  2237  02CA  0084               	movwf	4
  2238  02CB  120A  118A  2233  120A  118A  	fcall	stringtab
  2239  02D0  120A  118A  2446  120A  118A  	fcall	_Lcd_Write_Char
  2240  02D5                     l1337:
  2241  02D5  3001               	movlw	1
  2242  02D6  1283               	bcf	3,5	;RP0=0, select bank0
  2243  02D7  1303               	bcf	3,6	;RP1=0, select bank0
  2244  02D8  07A0               	addwf	Lcd_Write_String@i,f
  2245  02D9  1803               	skipnc
  2246  02DA  0AA1               	incf	Lcd_Write_String@i+1,f
  2247  02DB  3000               	movlw	0
  2248  02DC  07A1               	addwf	Lcd_Write_String@i+1,f
  2249  02DD                     l1339:
  2250  02DD  0820               	movf	Lcd_Write_String@i,w
  2251  02DE  0776               	addwf	Lcd_Write_String@a,w
  2252  02DF  00F9               	movwf	??_Lcd_Write_String+1
  2253  02E0  0877               	movf	Lcd_Write_String@a+1,w
  2254  02E1  00F8               	movwf	??_Lcd_Write_String
  2255  02E2  1803               	skipnc
  2256  02E3  0AF8               	incf	??_Lcd_Write_String,f
  2257  02E4  1FA0               	btfss	Lcd_Write_String@i,7
  2258  02E5  2AE7               	goto	u840
  2259  02E6  03F8               	decf	??_Lcd_Write_String,f
  2260  02E7                     u840:
  2261  02E7  0878               	movf	??_Lcd_Write_String,w
  2262  02E8  00FA               	movwf	??_Lcd_Write_String+2
  2263  02E9  087A               	movf	??_Lcd_Write_String+2,w
  2264  02EA  1283               	bcf	3,5	;RP0=0, select bank0
  2265  02EB  1303               	bcf	3,6	;RP1=0, select bank0
  2266  02EC  00FF               	movwf	btemp+1
  2267  02ED  0879               	movf	??_Lcd_Write_String+1,w
  2268  02EE  0084               	movwf	4
  2269  02EF  120A  118A  2233  120A  118A  	fcall	stringtab
  2270  02F4  3A00               	xorlw	0
  2271  02F5  1D03               	skipz
  2272  02F6  2AF8               	goto	u851
  2273  02F7  2AF9               	goto	u850
  2274  02F8                     u851:
  2275  02F8  2AB9               	goto	l1335
  2276  02F9                     u850:
  2277  02F9                     l127:
  2278  02F9  0008               	return
  2279  02FA                     __end_of_Lcd_Write_String:
  2280                           
  2281                           	psect	text12
  2282  0446                     __ptext12:	
  2283 ;; *************** function _Lcd_Write_Char *****************
  2284 ;; Defined at:
  2285 ;;		line 83 in file "./lcdlib.h"
  2286 ;; Parameters:    Size  Location     Type
  2287 ;;  a               1    wreg     unsigned char 
  2288 ;; Auto vars:     Size  Location     Type
  2289 ;;  a               1    5[COMMON] unsigned char 
  2290 ;; Return value:  Size  Location     Type
  2291 ;;                  1    wreg      void 
  2292 ;; Registers used:
  2293 ;;		wreg, status,2, status,0, pclath, cstack
  2294 ;; Tracked objects:
  2295 ;;		On entry : 0/0
  2296 ;;		On exit  : 0/0
  2297 ;;		Unchanged: 0/0
  2298 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2299 ;;      Params:         0       0       0       0       0
  2300 ;;      Locals:         1       0       0       0       0
  2301 ;;      Temps:          2       0       0       0       0
  2302 ;;      Totals:         3       0       0       0       0
  2303 ;;Total ram usage:        3 bytes
  2304 ;; Hardware stack levels used:    1
  2305 ;; Hardware stack levels required when called:    2
  2306 ;; This function calls:
  2307 ;;		_Lcd_Port
  2308 ;; This function is called by:
  2309 ;;		_Lcd_Write_String
  2310 ;;		_ARRANQUE
  2311 ;; This function uses a non-reentrant model
  2312 ;;
  2313                           
  2314                           
  2315                           ;psect for function _Lcd_Write_Char
  2316  0446                     _Lcd_Write_Char:
  2317                           
  2318                           ;incstack = 0
  2319                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  2320                           ;Lcd_Write_Char@a stored from wreg
  2321  0446  00F5               	movwf	Lcd_Write_Char@a
  2322  0447                     l1207:
  2323                           
  2324                           ;./lcdlib.h: 84:     RE1 = 1;
  2325  0447  1283               	bcf	3,5	;RP0=0, select bank0
  2326  0448  1303               	bcf	3,6	;RP1=0, select bank0
  2327  0449  1489               	bsf	9,1	;volatile
  2328  044A                     l1209:
  2329                           
  2330                           ;./lcdlib.h: 85:     Lcd_Port(a);
  2331  044A  0875               	movf	Lcd_Write_Char@a,w
  2332  044B  120A  118A  2383  120A  118A  	fcall	_Lcd_Port
  2333  0450                     l1211:
  2334                           
  2335                           ;./lcdlib.h: 86:     RE2 = 1;
  2336  0450  1283               	bcf	3,5	;RP0=0, select bank0
  2337  0451  1303               	bcf	3,6	;RP1=0, select bank0
  2338  0452  1509               	bsf	9,2	;volatile
  2339  0453                     l1213:
  2340                           
  2341                           ;./lcdlib.h: 87:     _delay((unsigned long)((4)*(8000000/4000.0)));
  2342  0453  300B               	movlw	11
  2343  0454  00F4               	movwf	??_Lcd_Write_Char+1
  2344  0455  3062               	movlw	98
  2345  0456  00F3               	movwf	??_Lcd_Write_Char
  2346  0457                     u1227:
  2347  0457  0BF3               	decfsz	??_Lcd_Write_Char,f
  2348  0458  2C57               	goto	u1227
  2349  0459  0BF4               	decfsz	??_Lcd_Write_Char+1,f
  2350  045A  2C57               	goto	u1227
  2351  045B  0000               	nop
  2352  045C                     l1215:
  2353                           
  2354                           ;./lcdlib.h: 88:     RE2 = 0;
  2355  045C  1283               	bcf	3,5	;RP0=0, select bank0
  2356  045D  1303               	bcf	3,6	;RP1=0, select bank0
  2357  045E  1109               	bcf	9,2	;volatile
  2358  045F                     l121:
  2359  045F  0008               	return
  2360  0460                     __end_of_Lcd_Write_Char:
  2361                           
  2362                           	psect	text13
  2363  0422                     __ptext13:	
  2364 ;; *************** function _Lcd_Set_Cursor *****************
  2365 ;; Defined at:
  2366 ;;		line 58 in file "./lcdlib.h"
  2367 ;; Parameters:    Size  Location     Type
  2368 ;;  a               1    wreg     unsigned char 
  2369 ;;  b               1    6[COMMON] unsigned char 
  2370 ;; Auto vars:     Size  Location     Type
  2371 ;;  a               1    8[COMMON] unsigned char 
  2372 ;;  temp            1    9[COMMON] unsigned char 
  2373 ;;  y               1    0        unsigned char 
  2374 ;;  z               1    0        unsigned char 
  2375 ;; Return value:  Size  Location     Type
  2376 ;;                  1    wreg      void 
  2377 ;; Registers used:
  2378 ;;		wreg, status,2, status,0, pclath, cstack
  2379 ;; Tracked objects:
  2380 ;;		On entry : 0/0
  2381 ;;		On exit  : 0/0
  2382 ;;		Unchanged: 0/0
  2383 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2384 ;;      Params:         1       0       0       0       0
  2385 ;;      Locals:         2       0       0       0       0
  2386 ;;      Temps:          1       0       0       0       0
  2387 ;;      Totals:         4       0       0       0       0
  2388 ;;Total ram usage:        4 bytes
  2389 ;; Hardware stack levels used:    1
  2390 ;; Hardware stack levels required when called:    3
  2391 ;; This function calls:
  2392 ;;		_Lcd_Cmd
  2393 ;; This function is called by:
  2394 ;;		_main
  2395 ;;		_ARRANQUE
  2396 ;; This function uses a non-reentrant model
  2397 ;;
  2398                           
  2399                           
  2400                           ;psect for function _Lcd_Set_Cursor
  2401  0422                     _Lcd_Set_Cursor:
  2402                           
  2403                           ;incstack = 0
  2404                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  2405                           ;Lcd_Set_Cursor@a stored from wreg
  2406  0422  00F8               	movwf	Lcd_Set_Cursor@a
  2407  0423                     l1311:
  2408                           
  2409                           ;./lcdlib.h: 59:     char temp, z, y;;./lcdlib.h: 60:     if (a == 1) {
  2410  0423  0378               	decf	Lcd_Set_Cursor@a,w
  2411  0424  1D03               	btfss	3,2
  2412  0425  2C27               	goto	u811
  2413  0426  2C28               	goto	u810
  2414  0427                     u811:
  2415  0427  2C34               	goto	l1317
  2416  0428                     u810:
  2417  0428                     l1313:
  2418                           
  2419                           ;./lcdlib.h: 61:         temp = 0x80 + b - 1;
  2420  0428  0876               	movf	Lcd_Set_Cursor@b,w
  2421  0429  3E7F               	addlw	127
  2422  042A  00F7               	movwf	??_Lcd_Set_Cursor
  2423  042B  0877               	movf	??_Lcd_Set_Cursor,w
  2424  042C  00F9               	movwf	Lcd_Set_Cursor@temp
  2425  042D                     l1315:
  2426                           
  2427                           ;./lcdlib.h: 62:         Lcd_Cmd(temp);
  2428  042D  0879               	movf	Lcd_Set_Cursor@temp,w
  2429  042E  120A  118A  2460  120A  118A  	fcall	_Lcd_Cmd
  2430                           
  2431                           ;./lcdlib.h: 63:     } else if (a == 2) {
  2432  0433  2C45               	goto	l115
  2433  0434                     l1317:
  2434  0434  3002               	movlw	2
  2435  0435  0678               	xorwf	Lcd_Set_Cursor@a,w
  2436  0436  1D03               	btfss	3,2
  2437  0437  2C39               	goto	u821
  2438  0438  2C3A               	goto	u820
  2439  0439                     u821:
  2440  0439  2C45               	goto	l115
  2441  043A                     u820:
  2442  043A                     l1319:
  2443                           
  2444                           ;./lcdlib.h: 64:         temp = 0xC0 + b - 1;
  2445  043A  0876               	movf	Lcd_Set_Cursor@b,w
  2446  043B  3EBF               	addlw	191
  2447  043C  00F7               	movwf	??_Lcd_Set_Cursor
  2448  043D  0877               	movf	??_Lcd_Set_Cursor,w
  2449  043E  00F9               	movwf	Lcd_Set_Cursor@temp
  2450  043F                     l1321:
  2451                           
  2452                           ;./lcdlib.h: 65:         Lcd_Cmd(temp);
  2453  043F  0879               	movf	Lcd_Set_Cursor@temp,w
  2454  0440  120A  118A  2460  120A  118A  	fcall	_Lcd_Cmd
  2455  0445                     l115:
  2456  0445  0008               	return
  2457  0446                     __end_of_Lcd_Set_Cursor:
  2458                           
  2459                           	psect	text14
  2460  02FA                     __ptext14:	
  2461 ;; *************** function _Lcd_Init *****************
  2462 ;; Defined at:
  2463 ;;		line 69 in file "./lcdlib.h"
  2464 ;; Parameters:    Size  Location     Type
  2465 ;;		None
  2466 ;; Auto vars:     Size  Location     Type
  2467 ;;		None
  2468 ;; Return value:  Size  Location     Type
  2469 ;;                  1    wreg      void 
  2470 ;; Registers used:
  2471 ;;		wreg, status,2, status,0, pclath, cstack
  2472 ;; Tracked objects:
  2473 ;;		On entry : 0/0
  2474 ;;		On exit  : 0/0
  2475 ;;		Unchanged: 0/0
  2476 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2477 ;;      Params:         0       0       0       0       0
  2478 ;;      Locals:         0       0       0       0       0
  2479 ;;      Temps:          2       0       0       0       0
  2480 ;;      Totals:         2       0       0       0       0
  2481 ;;Total ram usage:        2 bytes
  2482 ;; Hardware stack levels used:    1
  2483 ;; Hardware stack levels required when called:    3
  2484 ;; This function calls:
  2485 ;;		_Lcd_Cmd
  2486 ;;		_Lcd_Port
  2487 ;; This function is called by:
  2488 ;;		_main
  2489 ;; This function uses a non-reentrant model
  2490 ;;
  2491                           
  2492                           
  2493                           ;psect for function _Lcd_Init
  2494  02FA                     _Lcd_Init:
  2495  02FA                     l1323:	
  2496                           ;incstack = 0
  2497                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  2498                           
  2499                           
  2500                           ;./lcdlib.h: 70:     Lcd_Port(0x00);
  2501  02FA  3000               	movlw	0
  2502  02FB  120A  118A  2383  120A  118A  	fcall	_Lcd_Port
  2503  0300                     l1325:
  2504                           
  2505                           ;./lcdlib.h: 71:     _delay((unsigned long)((20)*(8000000/4000.0)));
  2506  0300  3034               	movlw	52
  2507  0301  00F7               	movwf	??_Lcd_Init+1
  2508  0302  30F1               	movlw	241
  2509  0303  00F6               	movwf	??_Lcd_Init
  2510  0304                     u1237:
  2511  0304  0BF6               	decfsz	??_Lcd_Init,f
  2512  0305  2B04               	goto	u1237
  2513  0306  0BF7               	decfsz	??_Lcd_Init+1,f
  2514  0307  2B04               	goto	u1237
  2515  0308  2B09               	nop2
  2516  0309                     l1327:
  2517                           
  2518                           ;./lcdlib.h: 72:     Lcd_Cmd(0x03);
  2519  0309  3003               	movlw	3
  2520  030A  120A  118A  2460  120A  118A  	fcall	_Lcd_Cmd
  2521                           
  2522                           ;./lcdlib.h: 73:     _delay((unsigned long)((5)*(8000000/4000.0)));
  2523  030F  300D               	movlw	13
  2524  0310  00F7               	movwf	??_Lcd_Init+1
  2525  0311  30FB               	movlw	251
  2526  0312  00F6               	movwf	??_Lcd_Init
  2527  0313                     u1247:
  2528  0313  0BF6               	decfsz	??_Lcd_Init,f
  2529  0314  2B13               	goto	u1247
  2530  0315  0BF7               	decfsz	??_Lcd_Init+1,f
  2531  0316  2B13               	goto	u1247
  2532  0317  2B18               	nop2
  2533  0318                     l1329:
  2534                           
  2535                           ;./lcdlib.h: 74:     Lcd_Cmd(0x03);
  2536  0318  3003               	movlw	3
  2537  0319  120A  118A  2460  120A  118A  	fcall	_Lcd_Cmd
  2538  031E                     l1331:
  2539                           
  2540                           ;./lcdlib.h: 75:     _delay((unsigned long)((11)*(8000000/4000.0)));
  2541  031E  301D               	movlw	29
  2542  031F  00F7               	movwf	??_Lcd_Init+1
  2543  0320  3091               	movlw	145
  2544  0321  00F6               	movwf	??_Lcd_Init
  2545  0322                     u1257:
  2546  0322  0BF6               	decfsz	??_Lcd_Init,f
  2547  0323  2B22               	goto	u1257
  2548  0324  0BF7               	decfsz	??_Lcd_Init+1,f
  2549  0325  2B22               	goto	u1257
  2550                           
  2551                           ;./lcdlib.h: 76:     Lcd_Cmd(0x03);
  2552  0326  3003               	movlw	3
  2553  0327  120A  118A  2460  120A  118A  	fcall	_Lcd_Cmd
  2554                           
  2555                           ;./lcdlib.h: 78:     Lcd_Cmd(0x38);
  2556  032C  3038               	movlw	56
  2557  032D  120A  118A  2460  120A  118A  	fcall	_Lcd_Cmd
  2558                           
  2559                           ;./lcdlib.h: 79:     Lcd_Cmd(0x0C);
  2560  0332  300C               	movlw	12
  2561  0333  120A  118A  2460  120A  118A  	fcall	_Lcd_Cmd
  2562                           
  2563                           ;./lcdlib.h: 80:     Lcd_Cmd(0x06);
  2564  0338  3006               	movlw	6
  2565  0339  120A  118A  2460  120A  118A  	fcall	_Lcd_Cmd
  2566  033E                     l118:
  2567  033E  0008               	return
  2568  033F                     __end_of_Lcd_Init:
  2569                           
  2570                           	psect	text15
  2571  0460                     __ptext15:	
  2572 ;; *************** function _Lcd_Cmd *****************
  2573 ;; Defined at:
  2574 ;;		line 46 in file "./lcdlib.h"
  2575 ;; Parameters:    Size  Location     Type
  2576 ;;  a               1    wreg     unsigned char 
  2577 ;; Auto vars:     Size  Location     Type
  2578 ;;  a               1    5[COMMON] unsigned char 
  2579 ;; Return value:  Size  Location     Type
  2580 ;;                  1    wreg      void 
  2581 ;; Registers used:
  2582 ;;		wreg, status,2, status,0, pclath, cstack
  2583 ;; Tracked objects:
  2584 ;;		On entry : 0/0
  2585 ;;		On exit  : 0/0
  2586 ;;		Unchanged: 0/0
  2587 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2588 ;;      Params:         0       0       0       0       0
  2589 ;;      Locals:         1       0       0       0       0
  2590 ;;      Temps:          2       0       0       0       0
  2591 ;;      Totals:         3       0       0       0       0
  2592 ;;Total ram usage:        3 bytes
  2593 ;; Hardware stack levels used:    1
  2594 ;; Hardware stack levels required when called:    2
  2595 ;; This function calls:
  2596 ;;		_Lcd_Port
  2597 ;; This function is called by:
  2598 ;;		_Lcd_Set_Cursor
  2599 ;;		_Lcd_Init
  2600 ;;		_Lcd_Clear
  2601 ;;		_Lcd_Shift_Right
  2602 ;;		_Lcd_Shift_Left
  2603 ;; This function uses a non-reentrant model
  2604 ;;
  2605                           
  2606                           
  2607                           ;psect for function _Lcd_Cmd
  2608  0460                     _Lcd_Cmd:
  2609                           
  2610                           ;incstack = 0
  2611                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  2612                           ;Lcd_Cmd@a stored from wreg
  2613  0460  00F5               	movwf	Lcd_Cmd@a
  2614  0461                     l1197:
  2615                           
  2616                           ;./lcdlib.h: 47:     RE1 = 0;
  2617  0461  1283               	bcf	3,5	;RP0=0, select bank0
  2618  0462  1303               	bcf	3,6	;RP1=0, select bank0
  2619  0463  1089               	bcf	9,1	;volatile
  2620  0464                     l1199:
  2621                           
  2622                           ;./lcdlib.h: 48:     Lcd_Port(a);
  2623  0464  0875               	movf	Lcd_Cmd@a,w
  2624  0465  120A  118A  2383  120A  118A  	fcall	_Lcd_Port
  2625  046A                     l1201:
  2626                           
  2627                           ;./lcdlib.h: 49:     RE2 = 1;
  2628  046A  1283               	bcf	3,5	;RP0=0, select bank0
  2629  046B  1303               	bcf	3,6	;RP1=0, select bank0
  2630  046C  1509               	bsf	9,2	;volatile
  2631  046D                     l1203:
  2632                           
  2633                           ;./lcdlib.h: 50:     _delay((unsigned long)((4)*(8000000/4000.0)));
  2634  046D  300B               	movlw	11
  2635  046E  00F4               	movwf	??_Lcd_Cmd+1
  2636  046F  3062               	movlw	98
  2637  0470  00F3               	movwf	??_Lcd_Cmd
  2638  0471                     u1267:
  2639  0471  0BF3               	decfsz	??_Lcd_Cmd,f
  2640  0472  2C71               	goto	u1267
  2641  0473  0BF4               	decfsz	??_Lcd_Cmd+1,f
  2642  0474  2C71               	goto	u1267
  2643  0475  0000               	nop
  2644  0476                     l1205:
  2645                           
  2646                           ;./lcdlib.h: 51:     RE2 = 0;
  2647  0476  1283               	bcf	3,5	;RP0=0, select bank0
  2648  0477  1303               	bcf	3,6	;RP1=0, select bank0
  2649  0478  1109               	bcf	9,2	;volatile
  2650  0479                     l106:
  2651  0479  0008               	return
  2652  047A                     __end_of_Lcd_Cmd:
  2653                           
  2654                           	psect	text16
  2655  0383                     __ptext16:	
  2656 ;; *************** function _Lcd_Port *****************
  2657 ;; Defined at:
  2658 ;;		line 8 in file "./lcdlib.h"
  2659 ;; Parameters:    Size  Location     Type
  2660 ;;  a               1    wreg     unsigned char 
  2661 ;; Auto vars:     Size  Location     Type
  2662 ;;  a               1    2[COMMON] unsigned char 
  2663 ;; Return value:  Size  Location     Type
  2664 ;;                  1    wreg      void 
  2665 ;; Registers used:
  2666 ;;		wreg
  2667 ;; Tracked objects:
  2668 ;;		On entry : 0/0
  2669 ;;		On exit  : 0/0
  2670 ;;		Unchanged: 0/0
  2671 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2672 ;;      Params:         0       0       0       0       0
  2673 ;;      Locals:         1       0       0       0       0
  2674 ;;      Temps:          0       0       0       0       0
  2675 ;;      Totals:         1       0       0       0       0
  2676 ;;Total ram usage:        1 bytes
  2677 ;; Hardware stack levels used:    1
  2678 ;; Hardware stack levels required when called:    1
  2679 ;; This function calls:
  2680 ;;		Nothing
  2681 ;; This function is called by:
  2682 ;;		_Lcd_Cmd
  2683 ;;		_Lcd_Init
  2684 ;;		_Lcd_Write_Char
  2685 ;; This function uses a non-reentrant model
  2686 ;;
  2687                           
  2688                           
  2689                           ;psect for function _Lcd_Port
  2690  0383                     _Lcd_Port:
  2691                           
  2692                           ;incstack = 0
  2693                           ; Regs used in _Lcd_Port: [wreg]
  2694                           ;Lcd_Port@a stored from wreg
  2695  0383  00F2               	movwf	Lcd_Port@a
  2696  0384                     l1177:
  2697                           
  2698                           ;./lcdlib.h: 9:     if (a & 1)
  2699  0384  1C72               	btfss	Lcd_Port@a,0
  2700  0385  2B87               	goto	u521
  2701  0386  2B88               	goto	u520
  2702  0387                     u521:
  2703  0387  2B8C               	goto	l87
  2704  0388                     u520:
  2705  0388                     l1179:
  2706                           
  2707                           ;./lcdlib.h: 10:         RD0 = 1;
  2708  0388  1283               	bcf	3,5	;RP0=0, select bank0
  2709  0389  1303               	bcf	3,6	;RP1=0, select bank0
  2710  038A  1408               	bsf	8,0	;volatile
  2711  038B  2B8F               	goto	l88
  2712  038C                     l87:	
  2713                           ;./lcdlib.h: 11:     else
  2714                           
  2715                           
  2716                           ;./lcdlib.h: 12:         RD0 = 0;
  2717  038C  1283               	bcf	3,5	;RP0=0, select bank0
  2718  038D  1303               	bcf	3,6	;RP1=0, select bank0
  2719  038E  1008               	bcf	8,0	;volatile
  2720  038F                     l88:
  2721                           
  2722                           ;./lcdlib.h: 14:     if (a & 2)
  2723  038F  1CF2               	btfss	Lcd_Port@a,1
  2724  0390  2B92               	goto	u531
  2725  0391  2B93               	goto	u530
  2726  0392                     u531:
  2727  0392  2B95               	goto	l89
  2728  0393                     u530:
  2729  0393                     l1181:
  2730                           
  2731                           ;./lcdlib.h: 15:         RD1 = 1;
  2732  0393  1488               	bsf	8,1	;volatile
  2733  0394  2B96               	goto	l90
  2734  0395                     l89:	
  2735                           ;./lcdlib.h: 16:     else
  2736                           
  2737                           
  2738                           ;./lcdlib.h: 17:         RD1 = 0;
  2739  0395  1088               	bcf	8,1	;volatile
  2740  0396                     l90:
  2741                           
  2742                           ;./lcdlib.h: 19:     if (a & 4)
  2743  0396  1D72               	btfss	Lcd_Port@a,2
  2744  0397  2B99               	goto	u541
  2745  0398  2B9A               	goto	u540
  2746  0399                     u541:
  2747  0399  2B9C               	goto	l91
  2748  039A                     u540:
  2749  039A                     l1183:
  2750                           
  2751                           ;./lcdlib.h: 20:         RD2 = 1;
  2752  039A  1508               	bsf	8,2	;volatile
  2753  039B  2B9D               	goto	l92
  2754  039C                     l91:	
  2755                           ;./lcdlib.h: 21:     else
  2756                           
  2757                           
  2758                           ;./lcdlib.h: 22:         RD2 = 0;
  2759  039C  1108               	bcf	8,2	;volatile
  2760  039D                     l92:
  2761                           
  2762                           ;./lcdlib.h: 24:     if (a & 8)
  2763  039D  1DF2               	btfss	Lcd_Port@a,3
  2764  039E  2BA0               	goto	u551
  2765  039F  2BA1               	goto	u550
  2766  03A0                     u551:
  2767  03A0  2BA3               	goto	l93
  2768  03A1                     u550:
  2769  03A1                     l1185:
  2770                           
  2771                           ;./lcdlib.h: 25:         RD3 = 1;
  2772  03A1  1588               	bsf	8,3	;volatile
  2773  03A2  2BA4               	goto	l94
  2774  03A3                     l93:	
  2775                           ;./lcdlib.h: 26:     else
  2776                           
  2777                           
  2778                           ;./lcdlib.h: 27:         RD3 = 0;
  2779  03A3  1188               	bcf	8,3	;volatile
  2780  03A4                     l94:
  2781                           
  2782                           ;./lcdlib.h: 28:     if (a & 16)
  2783  03A4  1E72               	btfss	Lcd_Port@a,4
  2784  03A5  2BA7               	goto	u561
  2785  03A6  2BA8               	goto	u560
  2786  03A7                     u561:
  2787  03A7  2BAA               	goto	l95
  2788  03A8                     u560:
  2789  03A8                     l1187:
  2790                           
  2791                           ;./lcdlib.h: 29:         RD4 = 1;
  2792  03A8  1608               	bsf	8,4	;volatile
  2793  03A9  2BAB               	goto	l96
  2794  03AA                     l95:	
  2795                           ;./lcdlib.h: 30:     else
  2796                           
  2797                           
  2798                           ;./lcdlib.h: 31:         RD4 = 0;
  2799  03AA  1208               	bcf	8,4	;volatile
  2800  03AB                     l96:
  2801                           
  2802                           ;./lcdlib.h: 32:     if (a & 32)
  2803  03AB  1EF2               	btfss	Lcd_Port@a,5
  2804  03AC  2BAE               	goto	u571
  2805  03AD  2BAF               	goto	u570
  2806  03AE                     u571:
  2807  03AE  2BB1               	goto	l97
  2808  03AF                     u570:
  2809  03AF                     l1189:
  2810                           
  2811                           ;./lcdlib.h: 33:         RD5 = 1;
  2812  03AF  1688               	bsf	8,5	;volatile
  2813  03B0  2BB2               	goto	l98
  2814  03B1                     l97:	
  2815                           ;./lcdlib.h: 34:     else
  2816                           
  2817                           
  2818                           ;./lcdlib.h: 35:         RD5 = 0;
  2819  03B1  1288               	bcf	8,5	;volatile
  2820  03B2                     l98:
  2821                           
  2822                           ;./lcdlib.h: 36:     if (a & 64)
  2823  03B2  1F72               	btfss	Lcd_Port@a,6
  2824  03B3  2BB5               	goto	u581
  2825  03B4  2BB6               	goto	u580
  2826  03B5                     u581:
  2827  03B5  2BB8               	goto	l99
  2828  03B6                     u580:
  2829  03B6                     l1191:
  2830                           
  2831                           ;./lcdlib.h: 37:         RD6 = 1;
  2832  03B6  1708               	bsf	8,6	;volatile
  2833  03B7  2BB9               	goto	l100
  2834  03B8                     l99:	
  2835                           ;./lcdlib.h: 38:     else
  2836                           
  2837                           
  2838                           ;./lcdlib.h: 39:         RD6 = 0;
  2839  03B8  1308               	bcf	8,6	;volatile
  2840  03B9                     l100:
  2841                           
  2842                           ;./lcdlib.h: 40:     if (a & 128)
  2843  03B9  1FF2               	btfss	Lcd_Port@a,7
  2844  03BA  2BBC               	goto	u591
  2845  03BB  2BBD               	goto	u590
  2846  03BC                     u591:
  2847  03BC  2BBF               	goto	l101
  2848  03BD                     u590:
  2849  03BD                     l1193:
  2850                           
  2851                           ;./lcdlib.h: 41:         RD7 = 1;
  2852  03BD  1788               	bsf	8,7	;volatile
  2853  03BE  2BC0               	goto	l103
  2854  03BF                     l101:	
  2855                           ;./lcdlib.h: 42:     else
  2856                           
  2857                           
  2858                           ;./lcdlib.h: 43:         RD7 = 0;
  2859  03BF  1388               	bcf	8,7	;volatile
  2860  03C0                     l103:
  2861  03C0  0008               	return
  2862  03C1                     __end_of_Lcd_Port:
  2863                           
  2864                           	psect	text17
  2865  04B5                     __ptext17:	
  2866 ;; *************** function _ISR *****************
  2867 ;; Defined at:
  2868 ;;		line 99 in file "Master.c"
  2869 ;; Parameters:    Size  Location     Type
  2870 ;;		None
  2871 ;; Auto vars:     Size  Location     Type
  2872 ;;		None
  2873 ;; Return value:  Size  Location     Type
  2874 ;;                  1    wreg      void 
  2875 ;; Registers used:
  2876 ;;		None
  2877 ;; Tracked objects:
  2878 ;;		On entry : 0/0
  2879 ;;		On exit  : 0/0
  2880 ;;		Unchanged: 0/0
  2881 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2882 ;;      Params:         0       0       0       0       0
  2883 ;;      Locals:         0       0       0       0       0
  2884 ;;      Temps:          2       0       0       0       0
  2885 ;;      Totals:         2       0       0       0       0
  2886 ;;Total ram usage:        2 bytes
  2887 ;; Hardware stack levels used:    1
  2888 ;; This function calls:
  2889 ;;		Nothing
  2890 ;; This function is called by:
  2891 ;;		Interrupt level 1
  2892 ;; This function uses a non-reentrant model
  2893 ;;
  2894                           
  2895                           
  2896                           ;psect for function _ISR
  2897  04B5                     _ISR:
  2898  04B5                     i1l1153:
  2899                           
  2900                           ;Master.c: 100:     if (SSPIF == 1) {
  2901  04B5  1283               	bcf	3,5	;RP0=0, select bank0
  2902  04B6  1303               	bcf	3,6	;RP1=0, select bank0
  2903  04B7  1D8C               	btfss	12,3	;volatile
  2904  04B8  2CBA               	goto	u51_21
  2905  04B9  2CBB               	goto	u51_20
  2906  04BA                     u51_21:
  2907  04BA  2CBC               	goto	i1l165
  2908  04BB                     u51_20:
  2909  04BB                     i1l1155:
  2910                           
  2911                           ;Master.c: 101:         SSPIF=0;
  2912  04BB  118C               	bcf	12,3	;volatile
  2913  04BC                     i1l165:
  2914  04BC  0871               	movf	??_ISR+1,w
  2915  04BD  008A               	movwf	10
  2916  04BE  0E70               	swapf	??_ISR,w
  2917  04BF  0083               	movwf	3
  2918  04C0  0EFE               	swapf	btemp,f
  2919  04C1  0E7E               	swapf	btemp,w
  2920  04C2  0009               	retfie
  2921  04C3                     __end_of_ISR:
  2922  007E                     btemp	set	126	;btemp
  2923  007E                     wtemp0	set	126
  2924                           
  2925                           	psect	intentry
  2926  0004                     __pintentry:	
  2927                           ;incstack = 0
  2928                           ; Regs used in _ISR: []
  2929                           
  2930  0004                     interrupt_function:
  2931  007E                     saved_w	set	btemp
  2932  0004  00FE               	movwf	btemp
  2933  0005  0E03               	swapf	3,w
  2934  0006  00F0               	movwf	??_ISR
  2935  0007  080A               	movf	10,w
  2936  0008  00F1               	movwf	??_ISR+1
  2937  0009  120A  118A  2CB5   	ljmp	_ISR
  2938                           
  2939                           	psect	config
  2940                           
  2941                           ;Config register CONFIG1 @ 0x2007
  2942                           ;	Oscillator Selection bits
  2943                           ;	FOSC = INTRC_NOCLKOUT, INTOSCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O f
      +                          unction on RA7/OSC1/CLKIN
  2944                           ;	Watchdog Timer Enable bit
  2945                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  2946                           ;	Power-up Timer Enable bit
  2947                           ;	PWRTE = OFF, PWRT disabled
  2948                           ;	RE3/MCLR pin function select bit
  2949                           ;	MCLRE = OFF, RE3/MCLR pin function is digital input, MCLR internally tied to VDD
  2950                           ;	Code Protection bit
  2951                           ;	CP = OFF, Program memory code protection is disabled
  2952                           ;	Data Code Protection bit
  2953                           ;	CPD = OFF, Data memory code protection is disabled
  2954                           ;	Brown Out Reset Selection bits
  2955                           ;	BOREN = OFF, BOR disabled
  2956                           ;	Internal External Switchover bit
  2957                           ;	IESO = OFF, Internal/External Switchover mode is disabled
  2958                           ;	Fail-Safe Clock Monitor Enabled bit
  2959                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
  2960                           ;	Low Voltage Programming Enable bit
  2961                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
  2962                           ;	In-Circuit Debugger Mode bit
  2963                           ;	DEBUG = 0x1, unprogrammed default
  2964  2007                     	org	8199
  2965  2007  20D4               	dw	8404
  2966                           
  2967                           ;Config register CONFIG2 @ 0x2008
  2968                           ;	Brown-out Reset Selection bit
  2969                           ;	BOR4V = BOR40V, Brown-out Reset set to 4.0V
  2970                           ;	Flash Program Memory Self Write Enable bits
  2971                           ;	WRT = OFF, Write protection off
  2972  2008                     	org	8200
  2973  2008  3FFF               	dw	16383

Data Sizes:
    Strings     103
    Constant    10
    Data        0
    BSS         4
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     11      12
    BANK0            80     47      50
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 17
		 -> STR_7(CODE[17]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 16
		 -> main@s(BANK0[16]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 20
		 -> main@s(BANK0[16]), STR_6(CODE[15]), STR_5(CODE[20]), STR_4(CODE[12]), 
		 -> STR_3(CODE[13]), STR_2(CODE[10]), STR_1(CODE[16]), 


Critical Paths under _main in COMMON

    _main->_Lcd_Write_String
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_sprintf
    _sprintf->___lwmod

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                23    23      0    4873
                                             24 BANK0     23    23      0
                           _Lcd_Init
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                              _setup
                            _spiInit
                            _spiRead
                           _spiWrite
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             27    20      7    2259
                                              5 BANK0     19    12      7
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              2     2      0      68
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     244
                                              2 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     412
                                             10 COMMON     1     1      0
                                              0 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     314
                                              2 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (1) _spiWrite                                             1     1      0      22
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _spiRead                                              0     0      0       0
                     _spiReceiveWait
 ---------------------------------------------------------------------------------
 (2) _spiReceiveWait                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _spiInit                                              4     1      3     360
                                              2 COMMON     4     1      3
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     7     5      2     820
                                              6 COMMON     5     3      2
                                              0 BANK0      2     2      0
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       3     3      0     198
                                              3 COMMON     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       6     5      1     940
                                              6 COMMON     4     3      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     374
                                              6 COMMON     2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              3     3      0     198
                                              3 COMMON     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0     176
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _ISR                                                  2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
   _setup
   _spiInit
   _spiRead
     _spiReceiveWait
   _spiWrite
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      B       C       1       85.7%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      3E       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     2F      32       5       62.5%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      3E      12        0.0%


Microchip Technology PIC Macro Assembler V2.31 build 20201012212115 
Symbol Table                                                                                   Tue Feb 23 15:53:51 2021

                        pc 0002                _SSPSTATbits 0094                         l70 04CC  
                       l73 04D2                         l90 0396                         l66 048A  
                       l91 039C                         l67 048F                         l92 039D  
                       l84 04CB                         l76 04D8                         l93 03A3  
                       l94 03A4                         l95 03AA                         l87 038C  
                       l96 03AB                         l88 038F                         l97 03B1  
                       l89 0395                         l98 03B2                         l99 03B8  
                       fsr 0004        ___wmul@multiplicand 0074                        l100 03B9  
                      l101 03BF                        l103 03C0                        l121 045F  
                      l106 0479                        l115 0445                        l118 033E  
                      l127 02F9                        l159 04A2                        l290 0409  
                      l275 00F8                        l292 0421                        l286 01A0  
                      l562 0382                        l572 03FC                        l743 04B4  
                      _RD0 0040                        _RD1 0041                        _RD2 0042  
                      _RD3 0043                        _RE1 0049                        _RD4 0044  
                      _RE2 004A                        _RD5 0045                        _RD6 0046  
                      _RD7 0047                        u520 0388                        u600 04D2  
                      u521 0387                        u601 04D1                        u530 0393  
                      u610 04AB                        u531 0392                        u611 04AA  
                      u540 039A                        u620 04B1                        _ISR 04B5  
                      u541 0399                        u621 04B0                        u550 03A1  
                      u710 036A                        u630 0403                        u551 03A0  
                      u711 0369                        u631 0402                        u560 03A8  
                      u800 0482                        u561 03A7                        u801 0481  
                      u705 035A                        u570 03AF                        u810 0428  
                      u730 037E                        u571 03AE                        u811 0427  
                      u731 037D                        u715 0366                        u580 03B6  
                      u820 043A                        u660 041D                        u581 03B5  
                      u821 0439                        u725 0372                        u661 041C  
                      u645 040A                        u590 03BD                        u830 02C3  
                      u670 0347                        u591 03BC                        u671 0346  
                      u655 0411                        u840 02E7                        u850 02F9  
                      u690 0359                        u851 02F8                        u691 0358  
                      u685 034B                        fsr0 0004                        indf 0000  
                     ?_ISR 0070                       l1201 046A                       l1203 046D  
                     l1211 0450                       l1205 0476                       l1213 0453  
                     l1301 04D4                       l1221 04AB                       l1311 0423  
                     l1215 045C                       l1207 0447                       l1303 04C3  
                     l1231 03FF                       l1223 04B1                       l1321 043F  
                     l1313 0428                       l1209 044A                       l1305 04C8  
                     l1233 0403                       l1225 04B3                       l1217 04A4  
                     l1331 031E                       l1323 02FA                       l1315 042D  
                     l1251 0351                       l1243 033F                       l1235 0410  
                     l1219 04A5                       l1181 0393                       l1325 0300  
                     l1317 0434                       l1333 02B4                       l1261 0371  
                     l1253 0355                       l1245 0341                       l1237 0417  
                     l1229 03FD                       l1191 03B6                       l1183 039A  
                     l1327 0309                       l1319 043A                       l1335 02B9  
                     l1351 04A1                       l1263 0378                       l1255 0359  
                     l1247 0347                       l1239 041D                       l1193 03BD  
                     l1185 03A1                       l1177 0384                       l1329 0318  
                     l1337 02D5                       l1345 0490                       l1257 036A  
                     l1249 034A                       l1265 037E                       l1601 00BE  
                     l1187 03A8                       l1179 0388                       l1339 02DD  
                     l1347 049A                       l1291 047B                       l1195 04CC  
                     l1259 0370                       l1611 00DC                       l1189 03AF  
                     l1197 0461                       l1349 049C                       l1293 0482  
                     l1621 010F                       l1613 00E6                       l1199 0464  
                     l1295 0484                       l1551 03D7                       l1543 03C1  
                     l1631 0130                       l1623 0113                       l1615 00EC  
                     l1607 00C0                       l1297 0486                       l1553 03DB  
                     l1545 03C9                       l1561 03F8                       l1641 0176  
                     l1633 0136                       l1625 0119                       l1617 00F2  
                     l1299 0489                       l1555 03E5                       l1547 03CC  
                     l1643 017D                       l1635 013D                       l1627 0120  
                     l1619 0103                       l1571 002E                       l1557 03EB  
                     l1549 03D3                       l1645 0181                       l1637 0141  
                     l1629 0124                       l1581 005F                       l1573 0033  
                     l1565 001C                       l1661 01C7                       l1559 03F2  
                     l1639 0146                       l1591 00A5                       l1583 0072  
                     l1575 0036                       l1567 0021                       l1647 018A  
                     l1671 01F4                       l1663 01C8                       l1593 00AD  
                     l1649 019C                       l1585 0076                       l1577 0046  
                     l1569 0027                       l1673 01FD                       l1665 01D9  
                     l1657 01A1                       l1595 00B1                       l1579 004A  
                     l1667 01DA                       l1659 01B4                       l1597 00B5  
                     l1589 0086                       l1669 01EB                       l1599 00B9  
                     l1695 009A                       STR_1 0272                       STR_2 02AA  
                     STR_3 0291                       STR_4 029E                       STR_5 024D  
                     STR_6 0282                       STR_7 0261                       u1020 03C9  
                     u1100 0086                       u1021 03C8                       u1101 0085  
                     u1110 00B5                       u1111 00B4                       u1040 03DB  
                     u1200 018A                       u1120 00DB                       u1041 03DA  
                     u1201 0189                       u1121 00DA                       u1050 03E5  
                     u1210 019C                       u1130 00E6                       u1051 03E4  
                     u1035 03CD                       u1211 019B                       u1131 00E5  
                     u1140 00EC                       u1141 00EB                       u1125 00D7  
                     u1070 03F8                       u1150 00F2                       u1071 03F7  
                     u1055 03E1                       u1151 00F1                       u1160 0103  
                     u1080 0027                       u1065 03EC                       u1161 0102  
                     u1081 0026                       u1170 0119                       u1090 0046  
                     u1227 0457                       u1171 0118                       u1091 0045  
                     u1180 0130                       u1237 0304                       u1181 012F  
                     u1165 00FF                       u1190 0136                       u1247 0313  
                     u1191 0135                       u1257 0322                       u1267 0471  
        ?_Lcd_Write_String 0076                       _main 01A1                       btemp 007E  
                     start 000C         ??_Lcd_Write_String 0078            __end_of_Lcd_Cmd 047A  
                    ??_ISR 0070                      ?_main 0070                      _DATAS 007B  
                    _ANSEL 0188            __end_of___lwdiv 0383                      i1l165 04BC  
          __end_of___lwmod 03FD                      u51_20 04BB                      u51_21 04BA  
                    _PORTA 0005                      _PORTB 0006                      _PORTD 0008  
  __size_of_Lcd_Set_Cursor 0024                      _TRISA 0085                      _TRISB 0086  
                    _TRISD 0088                      _TRISE 0089                      _SSPIF 0063  
          __end_of_dpowers 024D            __end_of_isdigit 04B5                      _setup 0490  
                    main@s 003F                      pclath 000A            __end_of_spiInit 0490  
          __end_of_spiRead 04CC                      status 0003                      wtemp0 007E  
          __end_of_sprintf 01A1           __end_of_Lcd_Init 033F           __end_of_Lcd_Port 03C1  
          __initialization 000F               __end_of_main 0233                     ??_main 0038  
                   ?_setup 0070                     _ANSELH 0189                     i1l1153 04B5  
                   i1l1155 04BB                     _INTCON 000B                     _SLAVE1 0051  
                   _SLAVE2 0050                     _SLAVE3 004F                  ??_Lcd_Cmd 0073  
  __size_of_Lcd_Write_Char 001A                     _TRISC3 043B                     _TRISC5 043D  
                   _SSPCON 0014                     _SSPBUF 0013                     ___wmul 03FD  
                ??___lwdiv 0076                  ??___lwmod 007A                  ??_isdigit 0072  
                   saved_w 007E           __end_of_spiWrite 04D9                  ??_spiInit 0075  
                ??_spiRead 0072                  ??_sprintf 002C            Lcd_Set_Cursor@a 0078  
          Lcd_Set_Cursor@b 0076    __end_of__initialization 0015             __pcstackCOMMON 0070  
            __end_of_setup 04A3             _Lcd_Set_Cursor 0422                  ?_Lcd_Init 0070  
                ?_Lcd_Port 0070               sprintf@width 0035                    ??_setup 0072  
               __pbssBANK0 004F                 __pmaintext 01A1                    ?___wmul 0072  
               __pintentry 0004    __size_of_spiReceiveWait 0007  __size_of_Lcd_Write_String 0046  
   __end_of_Lcd_Set_Cursor 0446                 ??_Lcd_Init 0076                 ??_Lcd_Port 0072  
                  _SSPSTAT 0094                 __stringtab 0233             _Lcd_Write_Char 0446  
                  _Lcd_Cmd 0460                  ?_spiWrite 0070            __size_of___wmul 0025  
                  ___lwdiv 033F                    ___lwmod 03C1            ?_Lcd_Set_Cursor 0076  
                  __ptext1 0019                    __ptext2 04A3                    __ptext3 03FD  
                  __ptext4 03C1                    __ptext5 033F                    __ptext6 04D3  
                  __ptext7 04C3                    __ptext8 04CC                    __ptext9 047A  
             __size_of_ISR 000E                    _dpowers 0243                    _isdigit 04A3  
                  _spiInit 047A                    _spiRead 04C3                    _sprintf 0019  
   __end_of_Lcd_Write_Char 0460       end_of_initialization 0015                 ??_spiWrite 0072  
                Lcd_Port@a 0072                  _PORTBbits 0006                spiWrite@dat 0072  
          ?_Lcd_Write_Char 0070          Lcd_Write_String@a 0076          Lcd_Write_String@i 0020  
           _spiReceiveWait 04CC             __end_of___wmul 0422           _Lcd_Write_String 02B4  
      start_initialization 000F                __end_of_ISR 04C3          __size_of_Lcd_Init 0045  
        __size_of_Lcd_Port 003E     __end_of_spiReceiveWait 04D3                   ??___wmul 0076  
          Lcd_Write_Char@a 0075                __pbssCOMMON 007B                  ___latbits 0002  
            __pcstackBANK0 0020                   ?_Lcd_Cmd 0070                sprintf@flag 0031  
              sprintf@prec 0030           ___lwdiv@dividend 0074            ?_spiReceiveWait 0070  
         ??_Lcd_Set_Cursor 0077                   ?___lwdiv 0072                   ?___lwmod 0020  
        __size_of_spiWrite 0006                  __pstrings 0233                   ?_isdigit 0070  
                 ?_spiInit 0072                   ?_spiRead 0070           ___lwdiv@quotient 0077  
                 ?_sprintf 0025             __size_of_setup 0013       spiInit@sTransmitEdge 0074  
        interrupt_function 0004             ___wmul@product 0076         spiInit@sDataSample 0072  
                 Lcd_Cmd@a 0075                __stringbase 0242          ___wmul@multiplier 0072  
         ??_Lcd_Write_Char 0073                   _Lcd_Init 02FA                   _Lcd_Port 0383  
 __end_of_Lcd_Write_String 02FA           __size_of_Lcd_Cmd 001A           __size_of___lwdiv 0044  
         __size_of___lwmod 003C         __end_of__stringtab 0243                _isdigit$748 0072  
               sprintf@val 0032           __size_of_isdigit 0012            ___lwdiv@divisor 0072  
          ___lwdiv@counter 0079                   __ptext10 0490                   __ptext11 02B4  
                 __ptext12 0446                   __ptext13 0422                   __ptext14 02FA  
                 __ptext15 0460                   __ptext16 0383                   __ptext17 04B5  
         __size_of_spiInit 0016           __size_of_spiRead 0009           __size_of_sprintf 0188  
            __size_of_main 0092                   _spiWrite 04D3               spiInit@sType 0075  
        spiInit@sClockIdle 0073                   isdigit@c 0073                   intlevel1 0000  
                sprintf@ap 002F                  sprintf@sp 0034           ___lwmod@dividend 0022  
         ??_spiReceiveWait 0072                  stringcode 023D         Lcd_Set_Cursor@temp 0079  
                 sprintf@c 0037                   sprintf@f 0025            ___lwmod@divisor 0020  
          ___lwmod@counter 0024                   stringdir 023D                   stringtab 0233  
